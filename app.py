from flask import Flask, request
import telebot
from telebot import types
import psycopg2
import os
import requests
import threading
import time
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '8028944732:AAFsvb4csGSRwtmEFYLGbnTKsCq1hOH6rm0'  # –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = '6956377285'
DATABASE_URL = 'postgresql://roblox_db_user:vjBfo3Vwigs5pnm107BhEkXe6AOy3FWF@dpg-cvr25cngi27c738j8c50-a.oregon-postgres.render.com/roblox_db'
SITE_URL = os.getenv('SITE_URL', 'https://tg-bod.onrender.com')

app = Flask(__name__)
bot = telebot.TeleBot(TOKEN)

processed_updates = set()
ad_keywords = ['–ø–æ–¥–ø–∏—Å–∫–∞', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–∞–∫—Ü–∏—è', '–ø—Ä–æ–º–æ', '—Å–∫–∏–¥–∫–∞', 'casino', 'bet']

def get_current_time():
    print("–í—Ä–µ–º—è UTC+2")
    return datetime.now() + timedelta(hours=2)

def get_db_connection():
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
    try:
        conn = psycopg2.connect(DATABASE_URL)
        print("–ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        return None

def init_db():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î")
    conn = get_db_connection()
    if conn is None:
        print("–û—à–∏–±–∫–∞ –ë–î")
        return False
    try:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users 
                     (chat_id TEXT PRIMARY KEY, prefix TEXT, subscription_end TEXT)''')
        c.execute('''CREATE TABLE IF NOT EXISTS credentials 
                     (login TEXT PRIMARY KEY, password TEXT, added_time TEXT)''')
        c.execute('''CREATE TABLE IF NOT EXISTS hacked_accounts 
                     (login TEXT PRIMARY KEY, password TEXT, hack_date TEXT, prefix TEXT, sold_status TEXT, linked_chat_id TEXT)''')
        print("–û—á–∏—Å—Ç–∫–∞ credentials –∏ hacked_accounts")
        c.execute("DELETE FROM credentials")
        c.execute("DELETE FROM hacked_accounts")
        subscription_end = (get_current_time() + timedelta(days=3650)).isoformat()
        c.execute("INSERT INTO users (chat_id, prefix, subscription_end) VALUES (%s, %s, %s) "
                  "ON CONFLICT (chat_id) DO UPDATE SET prefix = EXCLUDED.prefix, subscription_end = EXCLUDED.subscription_end",
                  (ADMIN_CHAT_ID, "–°–æ–∑–¥–∞—Ç–µ–ª—å", subscription_end))
        conn.commit()
        conn.close()
        print("–ë–î –≥–æ—Ç–æ–≤–∞")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        conn.close()
        return False

def keep_alive():
    print("–ó–∞–ø—É—Å–∫ keep_alive")
    while True:
        try:
            requests.get(SITE_URL)
            print(f"–ü–∏–Ω–≥ {SITE_URL}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ keep_alive: {e}")
        time.sleep(60)

def get_user(chat_id):
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}")
    conn = get_db_connection()
    if conn is None:
        if chat_id == ADMIN_CHAT_ID:
            return {'prefix': '–°–æ–∑–¥–∞—Ç–µ–ª—å', 'subscription_end': get_current_time() + timedelta(days=3650)}
        return None
    try:
        c = conn.cursor()
        c.execute("SELECT prefix, subscription_end FROM users WHERE chat_id = %s", (chat_id,))
        result = c.fetchone()
        conn.close()
        if result:
            return {'prefix': result[0], 'subscription_end': datetime.fromisoformat(result[1]) if result[1] else None}
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ get_user: {e}")
        conn.close()
        return None

def save_user(chat_id, prefix, subscription_end=None):
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {chat_id}")
    conn = get_db_connection()
    if conn is None:
        return
    try:
        c = conn.cursor()
        subscription_end = subscription_end or get_current_time().isoformat()
        c.execute("INSERT INTO users (chat_id, prefix, subscription_end) VALUES (%s, %s, %s) "
                  "ON CONFLICT (chat_id) DO UPDATE SET prefix = %s, subscription_end = %s",
                  (chat_id, prefix, subscription_end, prefix, subscription_end))
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ save_user: {e}")
        conn.close()

def check_access(chat_id, command):
    print(f"–î–æ—Å—Ç—É–ø –¥–ª—è {chat_id} –Ω–∞ {command}")
    user = get_user(chat_id)
    if user is None and command in ['start', 'menu', 'getchatid']:
        save_user(chat_id, "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å")
        user = get_user(chat_id)
    if not user or user['prefix'] == '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å':
        if command in ['start', 'menu', 'getchatid']:
            return None
        return "üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω! –ü–æ–¥–ø–∏—Å–∫–∞: @sacoectasy"
    if user['subscription_end'] and user['subscription_end'] < get_current_time():
        save_user(chat_id, '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å', get_current_time())
        return "üîí –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞! @sacoectasy"
    if command in ['database', 'db'] and user['prefix'] != '–°–æ–∑–¥–∞—Ç–µ–ª—å':
        return "üîí –¢–æ–ª—å–∫–æ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è!"
    return None

@app.route('/')
def index():
    print("–ó–∞–ø—Ä–æ—Å –Ω–∞ /")
    return "Bot is running!"

@app.route('/webhook', methods=['POST'])
def webhook():
    print("–ó–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    try:
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            if update and (update.message or update.callback_query):
                update_id = update.update_id
                if update_id in processed_updates:
                    print(f"–ü–æ–≤—Ç–æ—Ä update_id: {update_id}")
                    return 'OK', 200
                processed_updates.add(update_id)
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {update}")
                bot.process_new_updates([update])
            return 'OK', 200
        print("–ù–µ–≤–µ—Ä–Ω—ã–π content-type")
        return '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å', 400
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return 'OK', 200

@bot.message_handler(commands=['start'])
def start_cmd(message):
    chat_id = str(message.chat.id)
    print(f"/start –¥–ª—è {chat_id}")
    access = check_access(chat_id, 'start')
    if access:
        try:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {access}")
            bot.reply_to(message, access)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ /start: {e}")
        return
    response = "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! /menu –¥–ª—è –∫–æ–º–∞–Ω–¥."
    try:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {response}")
        bot.reply_to(message, response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /start: {e}")

@bot.message_handler(commands=['menu'])
def menu_cmd(message):
    chat_id = str(message.chat.id)
    print(f"/menu –¥–ª—è {chat_id}")
    access = check_access(chat_id, 'menu')
    if access:
        try:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {access}")
            bot.reply_to(message, access)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ /menu: {e}")
        return
    user = get_user(chat_id)
    response = f"üë§ –°—Ç–∞—Ç—É—Å: {user['prefix']}\nüìã –ö–æ–º–∞–Ω–¥—ã:\n/start\n/menu\n/getchatid"
    if user['prefix'] == '–°–æ–∑–¥–∞—Ç–µ–ª—å':
        response += "\n/db\n/database"
    try:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {response}")
        bot.reply_to(message, response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /menu: {e}")

@bot.message_handler(commands=['getchatid'])
def getchatid_cmd(message):
    chat_id = str(message.chat.id)
    print(f"/getchatid –¥–ª—è {chat_id}")
    access = check_access(chat_id, 'getchatid')
    if access:
        try:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {access}")
            bot.reply_to(message, access)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ /getchatid: {e}")
        return
    username = message.from_user.username or "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
    response = f"üë§ ID: `{chat_id}`\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}"
    try:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {response}")
        bot.reply_to(message, response, parse_mode='Markdown')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /getchatid: {e}")

@bot.message_handler(commands=['database'])
def database_cmd(message):
    chat_id = str(message.chat.id)
    print(f"/database –¥–ª—è {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        try:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {access}")
            bot.reply_to(message, access)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ /database: {e}")
        return
    response = "üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n–ü–æ–∫–∞ –ø—É—Å—Ç–æ."
    try:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {response}")
        bot.reply_to(message, response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /database: {e}")

@bot.message_handler(commands=['db'])
def db_cmd(message):
    chat_id = str(message.chat.id)
    print(f"/db –¥–ª—è {chat_id}")
    access = check_access(chat_id, 'db')
    if access:
        try:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {access}")
            bot.reply_to(message, access)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ /db: {e}")
        return
    response = "üìä –ö—Ä–∞—Ç–∫–∞—è –±–∞–∑–∞:\n–ü–æ–∫–∞ –ø—É—Å—Ç–æ."
    try:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {response}")
        bot.reply_to(message, response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /db: {e}")

@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    chat_id = str(message.chat.id)
    text = message.text.lower()
    print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è {chat_id}: {text}")
    if any(keyword in text for keyword in ad_keywords):
        print(f"–†–µ–∫–ª–∞–º–∞ –æ—Ç {chat_id}: {text}")
        try:
            bot.reply_to(message, "üö´ –†–µ–∫–ª–∞–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!")
            bot.send_message(ADMIN_CHAT_ID, f"üö® –†–µ–∫–ª–∞–º–∞ –æ—Ç {chat_id}: {text}")
            return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã: {e}")
    response = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu."
    try:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞: {response}")
        bot.reply_to(message, response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
init_db()
threading.Thread(target=keep_alive, daemon=True).start()

if __name__ == '__main__':
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(url=f'{SITE_URL}/webhook')
        print(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {SITE_URL}/webhook")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))
