# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
from flask import Flask, request, abort
import telebot
from telebot import types
import psycopg2
import os
import requests
import threading
import time
import logging
import json
from datetime import datetime, timedelta
from functools import wraps
from ratelimit import limits, sleep_and_retry
import hashlib
import secrets
import ipaddress
import re
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '8028944732:AAFsvb4csGSRwtmEFYLGbnTKsCq1hOH6rm0'
ADMIN_CHAT_ID = '6956377285'
DATABASE_URL = 'postgresql://roblox_db_user:vjBfo3Vwigs5pnm107BhEkXe6AOy3FWF@dpg-cvr25cngi27c738j8c50-a.oregon-postgres.render.com/roblox_db'
SITE_URL = os.getenv('SITE_URL', 'https://tg-bod.onrender.com')
SECRET_WEBHOOK_TOKEN = '98pOXgZq1JMVhHYU9646rpBQl5nvwNXUzvR_WOpV34s'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(TOKEN)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    raise

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
processed_updates = set()
tech_mode = False
tech_reason = ""
tech_end_time = None
ad_keywords = [
    '–ø–æ–¥–ø–∏—Å–∫–∞', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ',
    '–∞–∫—Ü–∏—è', '–ø—Ä–æ–º–æ', '—Å–∫–∏–¥–∫–∞', 'casino', 'bet', '–∫–∞–∑–∏–Ω–æ', '—Å—Ç–∞–≤–∫–∏',
    '–¥–µ–Ω—å–≥–∏', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–±–æ–Ω—É—Å'
]
TELEGRAM_IP_RANGES = [
    ipaddress.IPv4Network('149.154.160.0/20'),
    ipaddress.IPv4Network('91.108.4.0/22')
]
CALLS = 100
PERIOD = 60

# –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def hash_data(data):
    logger.debug(f"–•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {data}")
    return hashlib.sha256(str(data).encode()).hexdigest()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ IP Telegram
def is_telegram_ip(ip):
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ IP: {ip}")
    try:
        client_ip = ipaddress.ip_address(ip)
        for network in TELEGRAM_IP_RANGES:
            if client_ip in network:
                logger.info(f"IP {ip} ‚Äî Telegram")
                return True
        logger.warning(f"IP {ip} –Ω–µ Telegram")
        return False
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π IP: {ip}")
        return False

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
@sleep_and_retry
@limits(calls=CALLS, period=PERIOD)
def rate_limited_endpoint(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        logger.debug(f"–õ–∏–º–∏—Ç –¥–ª—è {func.__name__}")
        return func(*args, **kwargs)
    return wrapper

# –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (UTC+2)
def get_current_time():
    logger.debug("–ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏")
    return datetime.now() + timedelta(hours=2)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
def format_time(dt):
    if not dt:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    return dt.strftime("%Y-%m-%d %H:%M:%S")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
def get_db_connection():
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ")
    try:
        conn = psycopg2.connect(DATABASE_URL)
        logger.info("–ë–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
def init_db():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã")
    conn = get_db_connection()
    if conn is None:
        logger.error("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return False
    try:
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                chat_id TEXT PRIMARY KEY,
                prefix TEXT,
                subscription_end TEXT,
                username TEXT
            )
        ''')
        c.execute("SELECT column_name FROM information_schema.columns WHERE table_name = 'users'")
        columns = [row[0] for row in c.fetchall()]
        if 'last_activity' not in columns:
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ last_activity")
            c.execute('ALTER TABLE users ADD COLUMN last_activity TEXT')
        if 'ip_hash' not in columns:
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ip_hash")
            c.execute('ALTER TABLE users ADD COLUMN ip_hash TEXT')
        if 'username' not in columns:
            logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ username")
            c.execute('ALTER TABLE users ADD COLUMN username TEXT')
        c.execute('''
            CREATE TABLE IF NOT EXISTS credentials (
                login TEXT PRIMARY KEY,
                password TEXT,
                added_time TEXT,
                added_by TEXT
            )
        ''')
        c.execute('''
            CREATE TABLE IF NOT EXISTS hacked_accounts (
                login TEXT PRIMARY KEY,
                password TEXT,
                hack_date TEXT,
                prefix TEXT,
                sold_status TEXT,
                linked_chat_id TEXT
            )
        ''')
        c.execute("DELETE FROM credentials")
        c.execute("DELETE FROM hacked_accounts")
        subscription_end = (get_current_time() + timedelta(days=3650)).isoformat()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –°–æ–∑–¥–∞—Ç–µ–ª—è: {ADMIN_CHAT_ID}")
        c.execute(
            '''
            INSERT INTO users (chat_id, prefix, subscription_end, last_activity, ip_hash, username)
            VALUES (%s, %s, %s, %s, %s, %s)
            ON CONFLICT (chat_id) DO UPDATE
            SET prefix = EXCLUDED.prefix,
                subscription_end = EXCLUDED.subscription_end,
                last_activity = EXCLUDED.last_activity,
                ip_hash = EXCLUDED.ip_hash,
                username = EXCLUDED.username
            ''',
            (ADMIN_CHAT_ID, "–°–æ–∑–¥–∞—Ç–µ–ª—å", subscription_end, get_current_time().isoformat(), hash_data(ADMIN_CHAT_ID), "@sacoectasy")
        )
        conn.commit()
        logger.info("–ë–∞–∑–∞ –≥–æ—Ç–æ–≤–∞")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    finally:
        conn.close()

# –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def keep_alive():
    logger.info("–ó–∞–ø—É—Å–∫ keep_alive")
    while True:
        try:
            response = requests.get(SITE_URL, timeout=10)
            logger.debug(f"–ü–∏–Ω–≥ {SITE_URL}: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ keep_alive: {e}")
        time.sleep(60)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user(chat_id):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö: {chat_id}")
    conn = get_db_connection()
    if conn is None:
        if chat_id == ADMIN_CHAT_ID:
            logger.info("–ê–¥–º–∏–Ω –±–µ–∑ –±–∞–∑—ã")
            return {
                'prefix': '–°–æ–∑–¥–∞—Ç–µ–ª—å',
                'subscription_end': get_current_time() + timedelta(days=3650),
                'last_activity': get_current_time().isoformat(),
                'ip_hash': hash_data(chat_id),
                'username': '@sacoectasy'
            }
        logger.warning("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return None
    try:
        c = conn.cursor()
        c.execute(
            "SELECT prefix, subscription_end, last_activity, ip_hash, username FROM users WHERE chat_id = %s",
            (chat_id,)
        )
        result = c.fetchone()
        if result:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞–π–¥–µ–Ω")
            return {
                'prefix': result[0],
                'subscription_end': datetime.fromisoformat(result[1]) if result[1] else None,
                'last_activity': result[2],
                'ip_hash': result[3],
                'username': result[4]
            }
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None
    finally:
        conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user(chat_id, prefix, subscription_end=None, ip=None, username=None):
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {chat_id}")
    conn = get_db_connection()
    if conn is None:
        logger.error("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    try:
        c = conn.cursor()
        subscription_end = subscription_end or get_current_time().isoformat()
        ip_hash = hash_data(ip or chat_id)
        last_activity = get_current_time().isoformat()
        c.execute(
            '''
            INSERT INTO users (chat_id, prefix, subscription_end, last_activity, ip_hash, username)
            VALUES (%s, %s, %s, %s, %s, %s)
            ON CONFLICT (chat_id) DO UPDATE
            SET prefix = %s,
                subscription_end = %s,
                last_activity = %s,
                ip_hash = %s,
                username = %s
            ''',
            (chat_id, prefix, subscription_end, last_activity, ip_hash, username,
             prefix, subscription_end, last_activity, ip_hash, username)
        )
        conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    finally:
        conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def check_access(chat_id, command):
    global tech_mode, tech_end_time
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {chat_id} –¥–ª—è {command}")
    if tech_mode and chat_id != ADMIN_CHAT_ID:
        end_time_str = format_time(tech_end_time)
        logger.warning(f"–¢–µ—Ö. —Ä–µ–∂–∏–º: {chat_id}")
        return (
            f"üõ† *–ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –ø–µ—Ä–µ—Ä—ã–≤–µ!*\n"
            f"üìù *–ü—Ä–∏—á–∏–Ω–∞*: {tech_reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üïí *–û–∫–æ–Ω—á–∞–Ω–∏–µ*: {end_time_str}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    user = get_user(chat_id)
    if user is None:
        if command in ['menu', 'support'] and not tech_mode:
            logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {chat_id}")
            save_user(chat_id, "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å", username="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            return None
        logger.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞: {chat_id}, {command}")
        return "üí≥ *–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É @sacoectasy!*"
    if user['subscription_end'] and user['subscription_end'] < get_current_time():
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞: {chat_id}")
        save_user(chat_id, '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å', get_current_time().isoformat(), chat_id, user['username'])
        return "üí≥ *–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @sacoectasy.*"
    if user['prefix'] == '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å':
        if command in ['menu', 'support'] and not tech_mode:
            logger.debug(f"–†–∞–∑—Ä–µ—à—ë–Ω {command}")
            return None
        logger.warning(f"–ó–∞–ø—Ä–µ—â—ë–Ω {command} –¥–ª—è –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—è")
        return "üí≥ *–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —É @sacoectasy!*"
    if command in ['passwords', 'hacked', 'getchatid', 'site']:
        logger.debug(f"–†–∞–∑—Ä–µ—à—ë–Ω {command}")
        return None
    if command == 'database' and user['prefix'] in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å']:
        logger.debug(f"–†–∞–∑—Ä–µ—à—ë–Ω {command} –¥–ª—è {user['prefix']}")
        return None
    if command in ['techstop', 'techstopoff', 'adprefix', 'delprefix', 'adduser', 'addcred', 'addhacked', 'broadcast', 'admin']:
        if user['prefix'] != '–°–æ–∑–¥–∞—Ç–µ–ª—å':
            logger.warning(f"–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ {command} –æ—Ç {chat_id}")
            return "üîí *–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è!*"
    logger.debug(f"–†–∞–∑—Ä–µ—à—ë–Ω {command}")
    return None

# –û—á–∏—Å—Ç–∫–∞ –≤–≤–æ–¥–∞
def sanitize_input(text):
    if not text:
        return text
    dangerous_chars = [';', '--', '/*', '*/', 'DROP', 'SELECT', 'INSERT', 'UPDATE', 'DELETE']
    for char in dangerous_chars:
        text = text.replace(char, '')
    logger.debug(f"–û—á–∏—â–µ–Ω: {text}")
    return text

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_all_users():
    logger.info("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    conn = get_db_connection()
    if conn is None:
        logger.error("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return []
    try:
        c = conn.cursor()
        c.execute("SELECT chat_id, prefix, username FROM users")
        users = c.fetchall()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)}")
        return users
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        conn.close()

# –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
def check_bot_status():
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞")
    try:
        bot.get_me()
        logger.info("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
        return False

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def index():
    logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ /")
    if check_bot_status():
        return "Bot is running!", 200
    logger.error("–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    return "Bot is down!", 500

# –í–µ–±—Ö—É–∫
@app.route('/webhook', methods=['POST'])
@rate_limited_endpoint
def webhook():
    logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    client_ip = request.headers.get('X-Forwarded-For', request.remote_addr)
    if ',' in client_ip:
        client_ip = client_ip.split(',')[0].strip()
    if not is_telegram_ip(client_ip):
        logger.warning(f"–ß—É–∂–æ–π IP: {client_ip}")
        abort(403)
    secret_token = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
    if secret_token != SECRET_WEBHOOK_TOKEN:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {secret_token}")
        abort(403)
    if request.headers.get('content-type') != 'application/json':
        logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π content-type")
        abort(400)
    try:
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        if not update or not (update.message or update.callback_query):
            logger.debug("–ü—É—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return 'OK', 200
        update_id = update.update_id
        if update_id in processed_updates:
            logger.info(f"–ü–æ–≤—Ç–æ—Ä: {update_id}")
            return 'OK', 200
        processed_updates.add(update_id)
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {update_id}")
        bot.process_new_updates([update])
        return 'OK', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return 'OK', 200

# /start
@bot.message_handler(commands=['start'])
def start_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/start –æ—Ç {chat_id}")
    access = check_access(chat_id, 'start')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /start: {e}")
        return
    response = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!*\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ.\n"
        "üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
    try:
        bot.reply_to(message, response, parse_mode='Markdown')
        logger.info(f"–û—Ç–≤–µ—Ç: {response}")
        user = get_user(chat_id)
        if user is None:
            save_user(chat_id, "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å", ip=message.from_user.id, username=username)
        else:
            save_user(chat_id, user['prefix'], user['subscription_end'], message.from_user.id, username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /start: {e}")

# /menu
@bot.message_handler(commands=['menu'])
def menu_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/menu –æ—Ç {chat_id}")
    access = check_access(chat_id, 'menu')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /menu: {e}")
        return
    user = get_user(chat_id)
    if user is None:
        save_user(chat_id, "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å", ip=message.from_user.id, username=username)
        user = get_user(chat_id)
    prefix = user['prefix']
    tech_status = (
        f"üõ† *–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –∞–∫—Ç–∏–≤–µ–Ω*\n"
        f"üìù *–ü—Ä–∏—á–∏–Ω–∞*: {tech_reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üïí *–û–∫–æ–Ω—á–∞–Ω–∏–µ*: {format_time(tech_end_time)}"
    ) if tech_mode else "‚úÖ *–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –æ—Ç–∫–ª—é—á—ë–Ω*"
    response = (
        f"üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n"
        f"üë§ *–í–∞—à —Å—Ç–∞—Ç—É—Å*: `{prefix}`\n"
        f"üïí *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*: {tech_status}\n\n"
        f"üî• *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*:\n"
        f"üìñ /menu ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        f"üì© /support ‚Äî –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
    )
    if prefix != "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å":
        response += (
            f"üÜî /getchatid ‚Äî –£–∑–Ω–∞—Ç—å –≤–∞—à ID\n"
            f"üåê /site ‚Äî –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç\n"
            f"üîë /passwords ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞—Ä–æ–ª–µ–π\n"
            f"üíª /hacked ‚Äî –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n"
        )
    if prefix in ["–ê–¥–º–∏–Ω", "–°–æ–∑–¥–∞—Ç–µ–ª—å"]:
        response += f"üóÑ /database ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n"
    if prefix == "–°–æ–∑–¥–∞—Ç–µ–ª—å":
        response += (
            f"üîß /admin ‚Äî –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"üö® /techstop ‚Äî –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤\n"
            f"‚úÖ /techstopoff ‚Äî –í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤\n"
            f"üì¢ /broadcast ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
            f"üëë /adprefix ‚Äî –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            f"üóë /delprefix ‚Äî –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            f"‚ûï /adduser ‚Äî –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"üîê /addcred ‚Äî –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å\n"
            f"üíæ /addhacked ‚Äî –î–æ–±–∞–≤–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
        )
    try:
        bot.reply_to(message, response, parse_mode='Markdown')
        logger.info(f"–û—Ç–≤–µ—Ç: {response}")
        save_user(chat_id, user['prefix'], user['subscription_end'], message.from_user.id, username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /menu: {e}")

# /getchatid
@bot.message_handler(commands=['getchatid'])
def getchatid_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/getchatid –æ—Ç {chat_id}")
    access = check_access(chat_id, 'getchatid')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /getchatid: {e}")
        return
    response = (
        f"üÜî *–í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä*\n"
        f"üî¢ *Chat ID*: `{chat_id}`\n"
        f"üë§ *–Æ–∑–µ—Ä–Ω–µ–π–º*: @{username}"
    )
    try:
        bot.reply_to(message, response, parse_mode='Markdown')
        logger.info(f"–û—Ç–≤–µ—Ç: {response}")
        user = get_user(chat_id)
        save_user(chat_id, user['prefix'], user['subscription_end'], message.from_user.id, username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /getchatid: {e}")

# /support
@bot.message_handler(commands=['support'])
def support_cmd(message):
    chat_id = str(message.chat.id)
    logger.info(f"/support –æ—Ç {chat_id}")
    access = check_access(chat_id, 'support')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /support: {e}")
        return
    response = (
        "üì© *–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?*\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ—ë –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
    )
    try:
        msg = bot.reply_to(message, response, parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_support_message)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Ç {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /support: {e}")

def process_support_message(message):
    chat_id = str(message.chat.id)
    text = sanitize_input(message.text)
    logger.info(f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç {chat_id}: {text}")
    if not text:
        try:
            bot.reply_to(message, "‚ùå *–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
            logger.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    try:
        bot.send_message(
            ADMIN_CHAT_ID,
            f"üì© *–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*\nüë§ *–û—Ç*: {chat_id}\nüìú *–¢–µ–∫—Å—Ç*: {text}",
            parse_mode='Markdown'
        )
        bot.reply_to(message, "‚úÖ *–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!*", parse_mode='Markdown')
        logger.info(f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*", parse_mode='Markdown')

# /site
@bot.message_handler(commands=['site'])
def site_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/site –æ—Ç {chat_id}")
    access = check_access(chat_id, 'site')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /site: {e}")
        return
    response = (
        "üåê *–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç*\n"
        "–°–≤—è–∑—å –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: [@sacoectasy](https://t.me/sacoectasy)"
    )
    try:
        bot.reply_to(message, response, parse_mode='Markdown')
        logger.info(f"–û—Ç–≤–µ—Ç: {response}")
        user = get_user(chat_id)
        save_user(chat_id, user['prefix'], user['subscription_end'], message.from_user.id, username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /site: {e}")

# /hacked
@bot.message_handler(commands=['hacked'])
def hacked_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/hacked –æ—Ç {chat_id}")
    access = check_access(chat_id, 'hacked')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /hacked: {e}")
        return
    conn = get_db_connection()
    if conn is None:
        try:
            bot.reply_to(message, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*", parse_mode='Markdown')
            logger.error("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    try:
        c = conn.cursor()
        c.execute("SELECT login, password, sold_status, hack_date FROM hacked_accounts")
        accounts = c.fetchall()
        response = "üíª *–í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã*\n\n" if accounts else "üì≠ *–°–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç.*\n"
        for login, password, status, hack_date in accounts:
            response += (
                f"üîë *–õ–æ–≥–∏–Ω*: `{login}`\n"
                f"üîí *–ü–∞—Ä–æ–ª—å*: `{password}`\n"
                f"üìä *–°—Ç–∞—Ç—É—Å*: {status}\n"
                f"üïí *–î–æ–±–∞–≤–ª–µ–Ω–æ*: {format_time(datetime.fromisoformat(hack_date)) if hack_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            )
        bot.reply_to(message, response, parse_mode='Markdown')
        logger.info(f"–û—Ç–≤–µ—Ç: {response}")
        user = get_user(chat_id)
        save_user(chat_id, user['prefix'], user['subscription_end'], message.from_user.id, username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /hacked: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö!*", parse_mode='Markdown')
    finally:
        conn.close()

# /passwords
@bot.message_handler(commands=['passwords'])
def passwords_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/passwords –æ—Ç {chat_id}")
    access = check_access(chat_id, 'passwords')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /passwords: {e}")
        return
    conn = get_db_connection()
    if conn is None:
        try:
            bot.reply_to(message, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*", parse_mode='Markdown')
            logger.error("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    try:
        c = conn.cursor()
        c.execute("SELECT login, password, added_time FROM credentials")
        credentials = c.fetchall()
        response = "üîë *–°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π*\n\n" if credentials else "üì≠ *–°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –ø—É—Å—Ç.*\n"
        for login, password, added_time in credentials:
            response += (
                f"üîê *–õ–æ–≥–∏–Ω*: `{login}`\n"
                f"üîí *–ü–∞—Ä–æ–ª—å*: `{password}`\n"
                f"üïí *–î–æ–±–∞–≤–ª–µ–Ω–æ*: {format_time(datetime.fromisoformat(added_time)) if added_time else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            )
        bot.reply_to(message, response, parse_mode='Markdown')
        user = get_user(chat_id)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ hacked", callback_data="add_to_hacked")
        )
        if user['prefix'] in ["–ê–¥–º–∏–Ω", "–°–æ–∑–¥–∞—Ç–µ–ª—å"]:
            keyboard.add(
                types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="delete_cred")
            )
        bot.send_message(
            chat_id,
            "‚öôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ*:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        logger.info(f"–û—Ç–≤–µ—Ç: {response}")
        save_user(chat_id, user['prefix'], user['subscription_end'], message.from_user.id, username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /passwords: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö!*", parse_mode='Markdown')
    finally:
        conn.close()

# –ö–Ω–æ–ø–∫–∏ /passwords
@bot.callback_query_handler(func=lambda call: call.data in ['add_to_hacked', 'delete_cred'])
def handle_passwords_buttons(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–ö–Ω–æ–ø–∫–∞ {call.data} –æ—Ç {chat_id}")
    if check_access(chat_id, 'passwords'):
        try:
            bot.answer_callback_query(call.id)
            bot.send_message(chat_id, "üîí *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!*", parse_mode='Markdown')
            logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏: {e}")
        return
    user = get_user(chat_id)
    if call.data == 'add_to_hacked':
        if user['prefix'] not in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å']:
            try:
                bot.answer_callback_query(call.id)
                bot.send_message(chat_id, "üîí *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ hacked —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!*", parse_mode='Markdown')
                logger.warning(f"–ù–µ –∞–¥–º–∏–Ω: {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ add_to_hacked: {e}")
            return
        try:
            msg = bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ hacked*:", parse_mode='Markdown')
            bot.register_next_step_handler(msg, process_hacked_login)
            bot.answer_callback_query(call.id)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ª–æ–≥–∏–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ add_to_hacked: {e}")
    elif call.data == 'delete_cred':
        if user['prefix'] not in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å']:
            try:
                bot.answer_callback_query(call.id)
                bot.send_message(chat_id, "üîí *–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!*", parse_mode='Markdown')
                logger.warning(f"–ù–µ –∞–¥–º–∏–Ω: {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ delete_cred: {e}")
            return
        try:
            msg = bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*:", parse_mode='Markdown')
            bot.register_next_step_handler(msg, process_delete_cred)
            bot.answer_callback_query(call.id)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ delete_cred: {e}")

def process_hacked_login(message):
    chat_id = str(message.chat.id)
    login = sanitize_input(message.text)
    logger.info(f"–õ–æ–≥–∏–Ω: {login} –æ—Ç {chat_id}")
    if not login:
        try:
            bot.reply_to(message, "‚ùå *–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
            logger.warning("–ü—É—Å—Ç–æ–π –ª–æ–≥–∏–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    conn = get_db_connection()
    if conn is None:
        try:
            bot.reply_to(message, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
            logger.error("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    try:
        c = conn.cursor()
        c.execute("SELECT password FROM credentials WHERE login = %s", (login,))
        result = c.fetchone()
        if not result:
            bot.reply_to(message, "‚ùå *–õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–∞—Ä–æ–ª–µ–π!*", parse_mode='Markdown')
            logger.warning(f"–õ–æ–≥–∏–Ω {login} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            conn.close()
            return
        password = result[0]
        msg = bot.reply_to(message, "üîí *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å*:", parse_mode='Markdown')
        bot.register_next_step_handler(msg, lambda m: process_hacked_password(m, login, password))
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è {login}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!*", parse_mode='Markdown')
    finally:
        conn.close()

def process_hacked_password(message, login, old_password):
    chat_id = str(message.chat.id)
    new_password = sanitize_input(message.text)
    logger.info(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {login}: {new_password}")
    if not new_password:
        try:
            bot.reply_to(message, "‚ùå *–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
            logger.warning("–ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥",[–£–î–ê–õ–ï–ù–û] callback_data=f"hacked_status_sold_{login}_{new_password}"),
        types.InlineKeyboardButton("‚õî –ù–µ–ø—Ä–æ–¥–∞–Ω", callback_data=f"hacked_status_not_sold_{login}_{new_password}")
    )
    try:
        bot.reply_to(message, "üìä *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞*:", reply_markup=keyboard, parse_mode='Markdown')
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è {login}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('hacked_status_'))
def handle_hacked_status(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–°—Ç–∞—Ç—É—Å {call.data} –æ—Ç {chat_id}")
    if check_access(chat_id, 'passwords'):
        try:
            bot.answer_callback_query(call.id)
            bot.send_message(chat_id, "üîí *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!*", parse_mode='Markdown')
            logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    _, status, login, password = call.data.split('_', 3)
    sold_status = "–ü—Ä–æ–¥–∞–Ω" if status == "sold" else "–ù–µ–ø—Ä–æ–¥–∞–Ω"
    conn = get_db_connection()
    if conn is None:
        try:
            bot.send_message(chat_id, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
            logger.error("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    try:
        c = conn.cursor()
        c.execute(
            '''
            INSERT INTO hacked_accounts (login, password, hack_date, prefix, sold_status, linked_chat_id)
            VALUES (%s, %s, %s, %s, %s, %s)
            ''',
            (login, password, get_current_time().isoformat(), "–ê–¥–º–∏–Ω", sold_status, chat_id)
        )
        c.execute("DELETE FROM credentials WHERE login = %s", (login,))
        conn.commit()
        bot.send_message(
            chat_id,
            f"‚úÖ *–ê–∫–∫–∞—É–Ω—Ç `{login}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ hacked!*\nüìä *–°—Ç–∞—Ç—É—Å*: {sold_status}",
            parse_mode='Markdown'
        )
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω: {login}, {sold_status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ hacked: {e}")
        bot.send_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!*", parse_mode='Markdown')
    finally:
        conn.close()
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏: {e}")

def process_delete_cred(message):
    chat_id = str(message.chat.id)
    login = sanitize_input(message.text)
    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ: {login} –æ—Ç {chat_id}")
    if not login:
        try:
            bot.reply_to(message, "‚ùå *–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
            logger.warning("–ü—É—Å—Ç–æ–π –ª–æ–≥–∏–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    conn = get_db_connection()
    if conn is None:
        try:
            bot.reply_to(message, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
            logger.error("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    try:
        c = conn.cursor()
        c.execute("DELETE FROM credentials WHERE login = %s", (login,))
        if c.rowcount == 0:
            bot.reply_to(message, "‚ùå *–õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!*", parse_mode='Markdown')
            logger.warning(f"–õ–æ–≥–∏–Ω {login} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            conn.commit()
            bot.reply_to(message, f"‚úÖ *–ü–∞—Ä–æ–ª—å –¥–ª—è `{login}` —É–¥–∞–ª—ë–Ω!*", parse_mode='Markdown')
            logger.info(f"–£–¥–∞–ª—ë–Ω: {login}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!*", parse_mode='Markdown')
    finally:
        conn.close()

# /admin
@bot.message_handler(commands=['admin'])
def admin_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/admin –æ—Ç {chat_id}")
    access = check_access(chat_id, 'admin')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /admin: {e}")
        return
    users = get_all_users()
    response = (
        "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*:\n"
    )
    if not users:
        response += "üì≠ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.*\n"
    else:
        for user_id, prefix, user_name in users:
            user_name = user_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            response += (
                f"üÜî *Chat ID*: `{user_id}`\n"
                f"üë§ *–Æ–∑–µ—Ä–Ω–µ–π–º*: @{user_name}\n"
                f"üîë *–ü—Ä–µ—Ñ–∏–∫—Å*: `{prefix}`\n\n"
            )
    response += (
        "üî• *–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã*:\n"
        "üíª /hacked ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "üîë /passwords ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è–º–∏\n"
        "üóÑ /database ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n"
        "üö® /techstop ‚Äî –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤\n"
        "‚úÖ /techstopoff ‚Äî –í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤\n"
        "üì¢ /broadcast ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        "üëë /adprefix ‚Äî –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "üóë /delprefix ‚Äî –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "‚ûï /adduser ‚Äî –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "üîê /addcred ‚Äî –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å\n"
        "üíæ /addhacked ‚Äî –î–æ–±–∞–≤–∏—Ç—å –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
    )
    try:
        bot.reply_to(message, response, parse_mode='Markdown')
        logger.info(f"–û—Ç–≤–µ—Ç: {response}")
        user = get_user(chat_id)
        save_user(chat_id, user['prefix'], user['subscription_end'], message.from_user.id, username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /admin: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏!*", parse_mode='Markdown')

# /database
@bot.message_handler(commands=['database'])
def database_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/database –æ—Ç {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /database: {e}")
        return
    response = (
        "üóÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="db_add"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="db_delete")
    )
    try:
        bot.reply_to(message, response, reply_markup=keyboard, parse_mode='Markdown')
        logger.info(f"–û—Ç–≤–µ—Ç: {response}")
        user = get_user(chat_id)
        save_user(chat_id, user['prefix'], user['subscription_end'], message.from_user.id, username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /database: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏!*", parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data in ['db_add', 'db_delete'])
def handle_database_buttons(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–ö–Ω–æ–ø–∫–∞ {call.data} –æ—Ç {chat_id}")
    if check_access(chat_id, 'database'):
        try:
            bot.answer_callback_query(call.id)
            bot.send_message(chat_id, "üîí *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!*", parse_mode='Markdown')
            logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏: {e}")
        return
    if call.data == 'db_add':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("üíæ –í hacked", callback_data="db_add_hacked"),
            types.InlineKeyboardButton("üîê –í credentials", callback_data="db_add_cred"),
            types.InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="db_add_user")
        )
        try:
            bot.send_message(
                chat_id,
                "‚ûï *–ö—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?*:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            bot.answer_callback_query(call.id)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ db_add: {e}")
    elif call.data == 'db_delete':
        try:
            msg = bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*:", parse_mode='Markdown')
            bot.register_next_step_handler(msg, process_db_delete)
            bot.answer_callback_query(call.id)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ db_delete: {e}")

@bot.callback_query_handler(func=lambda call: call.data in ['db_add_hacked', 'db_add_cred', 'db_add_user'])
def handle_db_add_buttons(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–ö–Ω–æ–ø–∫–∞ {call.data} –æ—Ç {chat_id}")
    if check_access(chat_id, 'database'):
        try:
            bot.answer_callback_query(call.id)
            bot.send_message(chat_id, "üîí *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!*", parse_mode='Markdown')
            logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏: {e}")
        return
    if call.data == 'db_add_hacked':
        try:
            msg = bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è hacked*:", parse_mode='Markdown')
            bot.register_next_step_handler(msg, process_add_hacked_login)
            bot.answer_callback_query(call.id)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ª–æ–≥–∏–Ω –¥–ª—è hacked")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ db_add_hacked: {e}")
    elif call.data == 'db_add_cred':
        try:
            msg = bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è credentials*:", parse_mode='Markdown')
            bot.register_next_step_handler(msg, process_add_cred_login)
            bot.answer_callback_query(call.id)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ª–æ–≥–∏–Ω –¥–ª—è credentials")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ db_add_cred: {e}")
    elif call.data == 'db_add_user':
        try:
            msg = bot.send_message(
                chat_id,
                "üìù *–í–≤–µ–¥–∏—Ç–µ chat_id –∏ –ø—Ä–µ—Ñ–∏–∫—Å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)*:",
                parse_mode='Markdown'
            )
            bot.register_next_step_handler(msg, process_add_user)
            bot.answer_callback_query(call.id)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ db_add_user: {e}")

def process_db_delete(message):
    chat_id = str(message.chat.id)
    login = sanitize_input(message.text)
    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ: {login} –æ—Ç {chat_id}")
    if not login:
        try:
            bot.reply_to(message, "‚ùå *–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
            logger.warning("–ü—É—Å—Ç–æ–π –ª–æ–≥–∏–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    conn = get_db_connection()
    if conn is None:
        try:
            bot.reply_to(message, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
            logger.error("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    try:
        c = conn.cursor()
        c.execute("DELETE FROM credentials WHERE login = %s", (login,))
        c.execute("DELETE FROM hacked_accounts WHERE login = %s", (login,))
        if c.rowcount == 0:
            bot.reply_to(message, "‚ùå *–õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!*", parse_mode='Markdown')
            logger.warning(f"–õ–æ–≥–∏–Ω {login} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            conn.commit()
            bot.reply_to(message, f"‚úÖ *–î–∞–Ω–Ω—ã–µ –¥–ª—è `{login}` —É–¥–∞–ª–µ–Ω—ã!*", parse_mode='Markdown')
            logger.info(f"–£–¥–∞–ª—ë–Ω: {login}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!*", parse_mode='Markdown')
    finally:
        conn.close()

# /techstop
@bot.message_handler(commands=['techstop'])
def techstop_cmd(message):
    global tech_mode, tech_reason, tech_end_time
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/techstop –æ—Ç {chat_id}")
    access = check_access(chat_id, 'techstop')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /techstop: {e}")
        return
    try:
        msg = bot.reply_to(
            message,
            "üìù *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ —á–∞—Å–∞—Ö (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 2)*:",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_techstop)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /techstop: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞!*", parse_mode='Markdown')

def process_techstop(message):
    global tech_mode, tech_reason, tech_end_time
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    try:
        reason, hours = sanitize_input(message.text).rsplit(maxsplit=1)
        hours = int(hours)
        if hours <= 0:
            raise ValueError("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        tech_reason = reason
        tech_end_time = get_current_time() + timedelta(hours=hours)
        tech_mode = True
        response = (
            f"üö® *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –≤–∫–ª—é—á—ë–Ω!*\n"
            f"üìù *–ü—Ä–∏—á–∏–Ω–∞*: {tech_reason}\n"
            f"üïí *–û–∫–æ–Ω—á–∞–Ω–∏–µ*: {format_time(tech_end_time)}"
        )
        bot.reply_to(message, response, parse_mode='Markdown')
        logger.info(f"–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤: {tech_reason}, –¥–æ {format_time(tech_end_time)}")
        user = get_user(chat_id)
        save_user(chat_id, user['prefix'], user['subscription_end'], message.from_user.id, username)
    except ValueError:
        logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        bot.reply_to(
            message,
            "‚ùå *–§–æ—Ä–º–∞—Ç: –ü—Ä–∏—á–∏–Ω–∞ –ß–∞—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 2)*",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!*", parse_mode='Markdown')

# /techstopoff
@bot.message_handler(commands=['techstopoff'])
def techstopoff_cmd(message):
    global tech_mode, tech_reason, tech_end_time
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/techstopoff –æ—Ç {chat_id}")
    access = check_access(chat_id, 'techstopoff')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /techstopoff: {e}")
        return
    tech_mode = False
    tech_reason = ""
    tech_end_time = None
    response = "‚úÖ *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –æ—Ç–∫–ª—é—á—ë–Ω!*"
    try:
        bot.reply_to(message, response, parse_mode='Markdown')
        logger.info(f"–û—Ç–≤–µ—Ç: {response}")
        user = get_user(chat_id)
        save_user(chat_id, user['prefix'], user['subscription_end'], message.from_user.id, username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /techstopoff: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è!*", parse_mode='Markdown')

# /adprefix
@bot.message_handler(commands=['adprefix'])
def adprefix_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/adprefix –æ—Ç {chat_id}")
    access = check_access(chat_id, 'adprefix')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /adprefix: {e}")
        return
    try:
        msg = bot.reply_to(
            message,
            "üìù *–í–≤–µ–¥–∏—Ç–µ chat_id –∏ –ø—Ä–µ—Ñ–∏–∫—Å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)*:",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_adprefix)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /adprefix: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞!*", parse_mode='Markdown')

def process_adprefix(message):
    chat_id = str(message.chat.id)
    try:
        target_id, prefix = sanitize_input(message.text).split()
        subscription_end = (get_current_time() + timedelta(days=30)).isoformat()
        user = get_user(target_id)
        username = user['username'] if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        save_user(target_id, prefix, subscription_end, target_id, username)
        bot.reply_to(
            message,
            f"‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –¥–ª—è `{target_id}`!*\nüîë *–ü—Ä–µ—Ñ–∏–∫—Å*: `{prefix}`",
            parse_mode='Markdown'
        )
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞: {target_id}, {prefix}")
    except ValueError:
        logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        bot.reply_to(
            message,
            "‚ùå *–§–æ—Ä–º–∞—Ç: chat_id –ø—Ä–µ—Ñ–∏–∫—Å*",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!*", parse_mode='Markdown')

# /delprefix
@bot.message_handler(commands=['delprefix'])
def delprefix_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/delprefix –æ—Ç {chat_id}")
    access = check_access(chat_id, 'delprefix')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /delprefix: {e}")
        return
    try:
        msg = bot.reply_to(message, "üìù *–í–≤–µ–¥–∏—Ç–µ chat_id*:", parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_delprefix)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /delprefix: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞!*", parse_mode='Markdown')

def process_delprefix(message):
    chat_id = str(message.chat.id)
    target_id = sanitize_input(message.text)
    logger.info(f"–°–±—Ä–æ—Å: {target_id}")
    if not target_id:
        try:
            bot.reply_to(message, "‚ùå *ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
            logger.warning("–ü—É—Å—Ç–æ–π ID")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    user = get_user(target_id)
    username = user['username'] if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    save_user(target_id, "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å", get_current_time().isoformat(), target_id, username)
    try:
        bot.reply_to(
            message,
            f"‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è `{target_id}` —Å–±—Ä–æ—à–µ–Ω–∞ –¥–æ `–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å`!*",
            parse_mode='Markdown'
        )
        logger.info(f"–°–±—Ä–æ—à–µ–Ω–æ: {target_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!*", parse_mode='Markdown')

# /adduser
@bot.message_handler(commands=['adduser'])
def adduser_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/adduser –æ—Ç {chat_id}")
    access = check_access(chat_id, 'adduser')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /adduser: {e}")
        return
    try:
        msg = bot.reply_to(
            message,
            "üìù *–í–≤–µ–¥–∏—Ç–µ chat_id –∏ –ø—Ä–µ—Ñ–∏–∫—Å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)*:",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_add_user)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /adduser: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞!*", parse_mode='Markdown')

def process_add_user(message):
    chat_id = str(message.chat.id)
    try:
        target_id, prefix = sanitize_input(message.text).split()
        save_user(target_id, prefix, get_current_time().isoformat(), target_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        bot.reply_to(
            message,
            f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_id}` –¥–æ–±–∞–≤–ª–µ–Ω!*\nüîë *–ü—Ä–µ—Ñ–∏–∫—Å*: `{prefix}`",
            parse_mode='Markdown'
        )
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω: {target_id}, {prefix}")
    except ValueError:
        logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        bot.reply_to(
            message,
            "‚ùå *–§–æ—Ä–º–∞—Ç: chat_id –ø—Ä–µ—Ñ–∏–∫—Å*",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!*", parse_mode='Markdown')

# /addcred
@bot.message_handler(commands=['addcred'])
def addcred_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/addcred –æ—Ç {chat_id}")
    access = check_access(chat_id, 'addcred')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /addcred: {e}")
        return
    try:
        msg = bot.reply_to(
            message,
            "üìù *–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è credentials*:",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_add_cred_login)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ª–æ–≥–∏–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /addcred: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞!*", parse_mode='Markdown')

def process_add_cred_login(message):
    chat_id = str(message.chat.id)
    login = sanitize_input(message.text)
    logger.info(f"–õ–æ–≥–∏–Ω: {login}")
    if not login:
        try:
            bot.reply_to(message, "‚ùå *–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
            logger.warning("–ü—É—Å—Ç–æ–π –ª–æ–≥–∏–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    try:
        msg = bot.reply_to(message, "üîí *–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å*:", parse_mode='Markdown')
        bot.register_next_step_handler(msg, lambda m: process_add_cred_password(m, login))
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ø–∞—Ä–æ–ª—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞!*", parse_mode='Markdown')

def process_add_cred_password(message, login):
    chat_id = str(message.chat.id)
    password = sanitize_input(message.text)
    logger.info(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {login}")
    if not password:
        try:
            bot.reply_to(message, "‚ùå *–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
            logger.warning("–ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    conn = get_db_connection()
    if conn is None:
        try:
            bot.reply_to(message, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
            logger.error("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    try:
        c = conn.cursor()
        c.execute(
            '''
            INSERT INTO credentials (login, password, added_time, added_by)
            VALUES (%s, %s, %s, %s)
            ''',
            (login, password, get_current_time().isoformat(), chat_id)
        )
        conn.commit()
        bot.reply_to(
            message,
            f"‚úÖ *–ü–∞—Ä–æ–ª—å –¥–ª—è `{login}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*",
            parse_mode='Markdown'
        )
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω: {login}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!*", parse_mode='Markdown')
    finally:
        conn.close()

# /addhacked
@bot.message_handler(commands=['addhacked'])
def addhacked_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/addhacked –æ—Ç {chat_id}")
    access = check_access(chat_id, 'addhacked')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /addhacked: {e}")
        return
    try:
        msg = bot.reply_to(
            message,
            "üìù *–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è hacked*:",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, process_add_hacked_login)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ª–æ–≥–∏–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /addhacked: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞!*", parse_mode='Markdown')

def process_add_hacked_login(message):
    chat_id = str(message.chat.id)
    login = sanitize_input(message.text)
    logger.info(f"–õ–æ–≥–∏–Ω: {login}")
    if not login:
        try:
            bot.reply_to(message, "‚ùå *–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
            logger.warning("–ü—É—Å—Ç–æ–π –ª–æ–≥–∏–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    try:
        msg = bot.reply_to(message, "üîí *–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å*:", parse_mode='Markdown')
        bot.register_next_step_handler(msg, lambda m: process_add_hacked_password(m, login))
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ø–∞—Ä–æ–ª—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞!*", parse_mode='Markdown')

def process_add_hacked_password(message, login):
    chat_id = str(message.chat.id)
    password = sanitize_input(message.text)
    logger.info(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {login}")
    if not password:
        try:
            bot.reply_to(message, "‚ùå *–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
            logger.warning("–ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–∞–Ω", callback_data=f"hacked_status_sold_{login}_{password}"),
        types.InlineKeyboardButton("‚õî –ù–µ–ø—Ä–æ–¥–∞–Ω", callback_data=f"hacked_status_not_sold_{login}_{password}")
    )
    try:
        bot.reply_to(
            message,
            "üìä *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞*:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!*", parse_mode='Markdown')

# /broadcast
@bot.message_handler(commands=['broadcast'])
def broadcast_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/broadcast –æ—Ç {chat_id}")
    access = check_access(chat_id, 'broadcast')
    if access:
        try:
            bot.reply_to(message, access, parse_mode='Markdown')
            logger.info(f"–û—Ç–≤–µ—Ç: {access}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ /broadcast: {e}")
        return
    try:
        msg = bot.reply_to(
            message,
            "üì¢ *–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏*:",
            parse_mode='Markdown'
        )
        bot.register_next_step_handler(msg, lambda m: process_broadcast_message(m, username))
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω —Ç–µ–∫—Å—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /broadcast: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞!*", parse_mode='Markdown')

def process_broadcast_message(message, sender_username):
    chat_id = str(message.chat.id)
    text = sanitize_input(message.text)
    logger.info(f"–¢–µ–∫—Å—Ç: {text}")
    if not text:
        try:
            bot.reply_to(message, "‚ùå *–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
            logger.warning("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    if any(keyword in text.lower() for keyword in ad_keywords):
        try:
            bot.reply_to(message, "üö´ *–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞!*", parse_mode='Markdown')
            logger.warning(f"–†–µ–∫–ª–∞–º–∞: {text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    users = get_all_users()
    if not users:
        try:
            bot.reply_to(message, "üì¢ *–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!*", parse_mode='Markdown')
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    response = (
        f"üì¢ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É*\n"
        f"üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å*: @{sender_username}\n"
        f"üìú *–¢–µ–∫—Å—Ç*:\n{text}\n\n"
        f"üë• *–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π*: {len(users)}\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã:"
    )
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"broadcast_confirm_{text}"),
        types.InlineKeyboardButton("‚õî –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")
    )
    try:
        bot.reply_to(message, response, reply_markup=keyboard, parse_mode='Markdown')
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!*", parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('broadcast_'))
def handle_broadcast_buttons(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–ö–Ω–æ–ø–∫–∞ {call.data} –æ—Ç {chat_id}")
    if check_access(chat_id, 'broadcast'):
        try:
            bot.answer_callback_query(call.id)
            bot.send_message(chat_id, "üîí *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!*", parse_mode='Markdown')
            logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
    if call.data == 'broadcast_cancel':
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text="‚ùå *–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!*",
                parse_mode='Markdown'
            )
            bot.answer_callback_query(call.id)
            logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {e}")
            bot.send_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã!*", parse_mode='Markdown')
        return
    if call.data.startswith('broadcast_confirm_'):
        text = call.data.replace('broadcast_confirm_', '', 1)
        users = get_all_users()
        success_count = 0
        fail_count = 0
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {len(users)}")
        for user_id, _, _ in users:
            try:
                bot.send_message(
                    user_id,
                    f"üì¢ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –°–æ–∑–¥–∞—Ç–µ–ª—è*:\n{text}",
                    parse_mode='Markdown'
                )
                success_count += 1
                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
                time.sleep(0.05)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ {user_id}: {e}")
                fail_count += 1
        response = (
            f"üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n"
            f"‚úÖ *–£—Å–ø–µ—à–Ω–æ*: {success_count}\n"
            f"‚ùå *–û—à–∏–±–∫–∏*: {fail_count}"
        )
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=response,
                parse_mode='Markdown'
            )
            bot.answer_callback_query(call.id)
            logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞: {success_count} –æ–∫, {fail_count} –æ—à–∏–±–æ–∫")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            bot.send_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!*", parse_mode='Markdown')

# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(func=lambda message: True)
def unknown_command(message):
    chat_id = str(message.chat.id)
    text = sanitize_input(message.text.lower())
    logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –æ—Ç {chat_id}: {text}")
    if any(keyword in text for keyword in ad_keywords):
        logger.warning(f"–†–µ–∫–ª–∞–º–∞: {text}")
        try:
            bot.reply_to(message, "üö´ *–†–µ–∫–ª–∞–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!*", parse_mode='Markdown')
            bot.send_message(
                ADMIN_CHAT_ID,
                f"üö® *–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–∫–ª–∞–º—ã*\nüë§ *–û—Ç*: {chat_id}\nüìú *–¢–µ–∫—Å—Ç*: {text}",
                parse_mode='Markdown'
            )
            logger.info("–†–µ–∫–ª–∞–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return
    response = (
        "‚ùå *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!*\n"
        "üìñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )
    try:
        bot.reply_to(message, response, parse_mode='Markdown')
        logger.info(f"–û—Ç–≤–µ—Ç: {response}")
        user = get_user(chat_id)
        if user:
            username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            save_user(chat_id, user['prefix'], user['subscription_end'], message.from_user.id, username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
def monitor_activity():
    logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    while True:
        try:
            conn = get_db_connection()
            if conn:
                c = conn.cursor()
                c.execute(
                    "SELECT chat_id, last_activity FROM users WHERE last_activity < %s",
                    ((get_current_time() - timedelta(days=30)).isoformat(),)
                )
                inactive = c.fetchall()
                for user_id, last_activity in inactive:
                    logger.info(f"–ù–µ–∞–∫—Ç–∏–≤–µ–Ω {user_id}: {last_activity}")
                conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        time.sleep(3600)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
def get_db_stats():
    logger.info("–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    conn = get_db_connection()
    if conn is None:
        logger.error("–ë–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return None
    try:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users")
        user_count = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM credentials")
        cred_count = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM hacked_accounts")
        hacked_count = c.fetchone()[0]
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {user_count} users, {cred_count} creds, {hacked_count} hacked")
        return {'users': user_count, 'credentials': cred_count, 'hacked': hacked_count}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None
    finally:
        conn.close()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
def validate_password(password):
    logger.debug(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: {password}")
    if len(password) < 6:
        logger.warning("–ö–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å")
        return False
    if not re.search(r'[A-Za-z0-9]', password):
        logger.warning("–ù–µ—Ç –±—É–∫–≤/—Ü–∏—Ñ—Ä")
        return False
    logger.debug("–ü–∞—Ä–æ–ª—å –æ–∫")
    return True

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    if not init_db():
        logger.error("–û—à–∏–±–∫–∞ –±–∞–∑—ã")
        raise Exception("Database init failed")
    threading.Thread(target=keep_alive, daemon=True).start()
    logger.info("Keep_alive –∑–∞–ø—É—â–µ–Ω")
    threading.Thread(target=monitor_activity, daemon=True).start()
    logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    try:
        logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞")
        bot.remove_webhook()
        time.sleep(1)
        webhook_url = f'{SITE_URL}/webhook'
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞: {webhook_url}")
        bot.set_webhook(url=webhook_url, secret_token=SECRET_WEBHOOK_TOKEN)
        logger.info(f"–í–µ–±—Ö—É–∫: {SECRET_WEBHOOK_TOKEN}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise
    try:
        logger.info("–ó–∞–ø—É—Å–∫ Flask")
        app.run(
            host='0.0.0.0',
            port=int(os.getenv('PORT', 10000)),
            debug=False
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        raise
